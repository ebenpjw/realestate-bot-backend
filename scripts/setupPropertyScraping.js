#!/usr/bin/env node

/**
 * Setup Script for Property Scraping System
 * Helps configure and test the property scraping solution
 */

const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

class PropertyScrapingSetup {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  async setup() {
    console.log('üè† Property Scraping System Setup\n');
    console.log('This script will help you configure the property scraping solution.\n');

    try {
      // Step 1: Get Railway URL
      console.log('1Ô∏è‚É£ Railway Backend Configuration');
      const railwayUrl = await this.question('Enter your Railway app URL (e.g., https://your-app.railway.app): ');
      
      if (!railwayUrl || !railwayUrl.includes('railway.app')) {
        console.log('‚ö†Ô∏è  Please provide a valid Railway URL');
        return;
      }

      const webhookUrl = `${railwayUrl.replace(/\/$/, '')}/api/webhooks/property-data`;
      console.log(`‚úÖ Webhook URL: ${webhookUrl}\n`);

      // Step 2: Get authentication token
      console.log('2Ô∏è‚É£ Security Configuration');
      const authToken = await this.question('Enter webhook authentication token (or press Enter for default): ') || 'default-webhook-secret';
      console.log(`‚úÖ Auth token configured\n`);

      // Step 3: Update scraper configuration
      console.log('3Ô∏è‚É£ Updating scraper configuration...');
      await this.updateScraperConfig(webhookUrl, authToken);
      console.log('‚úÖ Scraper configuration updated\n');

      // Step 4: Test connection
      console.log('4Ô∏è‚É£ Testing connection to Railway backend...');
      const testResult = await this.testConnection(webhookUrl, authToken);
      
      if (testResult.success) {
        console.log('‚úÖ Connection test successful!\n');
      } else {
        console.log(`‚ùå Connection test failed: ${testResult.error}\n`);
        console.log('üí° Make sure your Railway app is running and accessible\n');
      }

      // Step 5: Create environment file
      console.log('5Ô∏è‚É£ Creating environment configuration...');
      await this.createEnvFile(authToken);
      console.log('‚úÖ Environment file created\n');

      // Step 6: Show next steps
      this.showNextSteps(webhookUrl);

    } catch (error) {
      console.error('‚ùå Setup failed:', error.message);
    } finally {
      this.rl.close();
    }
  }

  async updateScraperConfig(webhookUrl, authToken) {
    const scraperPath = path.join(__dirname, 'localScraperWithWebhook.js');
    
    try {
      let content = await fs.readFile(scraperPath, 'utf8');
      
      // Update webhook URL
      content = content.replace(
        /this\.webhookUrl = '[^']*';/,
        `this.webhookUrl = '${webhookUrl}';`
      );
      
      // Update auth token default
      content = content.replace(
        /process\.env\.WEBHOOK_SECRET \|\| '[^']*'/,
        `process.env.WEBHOOK_SECRET || '${authToken}'`
      );
      
      await fs.writeFile(scraperPath, content);
      
    } catch (error) {
      throw new Error(`Failed to update scraper config: ${error.message}`);
    }
  }

  async testConnection(webhookUrl, authToken) {
    try {
      const axios = require('axios');
      
      const testPayload = {
        properties: [{
          name: 'Setup Test Property',
          developer: 'Setup Test',
          address: 'Test Address, Singapore',
          district: 'Test District',
          propertyType: 'Test'
        }],
        source: 'setup-test',
        timestamp: new Date().toISOString(),
        metadata: {
          test: true,
          setupVersion: '1.0.0'
        }
      };

      const response = await axios.post(webhookUrl, testPayload, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`,
          'X-Setup-Test': 'true'
        },
        timeout: 10000
      });

      return {
        success: true,
        status: response.status,
        data: response.data
      };

    } catch (error) {
      return {
        success: false,
        error: error.message,
        status: error.response?.status,
        data: error.response?.data
      };
    }
  }

  async createEnvFile(authToken) {
    const envContent = `# Property Scraping Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Webhook Authentication
WEBHOOK_SECRET=${authToken}

# Scraping Configuration
SCRAPING_INTERVAL_HOURS=24
MAX_RETRIES=3
TIMEOUT_SECONDS=30

# Debug Settings
DEBUG_MODE=false
SAVE_SCREENSHOTS=false
HEADLESS_MODE=true

# Rate Limiting
REQUESTS_PER_MINUTE=10
DELAY_BETWEEN_REQUESTS=6000
`;

    await fs.writeFile('.env.scraping', envContent);
  }

  showNextSteps(webhookUrl) {
    console.log('üéâ Setup Complete! Next Steps:\n');
    
    console.log('üìã Quick Start Commands:');
    console.log('   # Test the scraper');
    console.log('   node scripts/testLocalScraper.js\n');
    
    console.log('   # Run one-time scraping');
    console.log('   node scripts/localScraperWithWebhook.js scrape\n');
    
    console.log('   # Start daily automated scraping');
    console.log('   node scripts/localScraperWithWebhook.js schedule\n');

    console.log('üîß Configuration Files Created:');
    console.log('   ‚úÖ scripts/localScraperWithWebhook.js (updated)');
    console.log('   ‚úÖ .env.scraping (environment variables)\n');

    console.log('üåê Your Configuration:');
    console.log(`   Webhook URL: ${webhookUrl}`);
    console.log('   Auth Token: [CONFIGURED]');
    console.log('   Environment: .env.scraping\n');

    console.log('üìä Monitoring:');
    console.log('   ‚Ä¢ Check scraped-properties.json for local backups');
    console.log('   ‚Ä¢ Monitor Railway logs for webhook activity');
    console.log('   ‚Ä¢ Check Supabase for stored property data\n');

    console.log('üöÄ Ready to start scraping property data!');
  }
}

// Run setup if called directly
if (require.main === module) {
  const setup = new PropertyScrapingSetup();
  
  setup.setup()
    .then(() => {
      console.log('\n‚úÖ Setup completed successfully!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Setup failed:', error);
      process.exit(1);
    });
}

module.exports = PropertyScrapingSetup;
