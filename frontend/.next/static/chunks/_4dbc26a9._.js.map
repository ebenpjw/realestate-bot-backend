{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/dashboardApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface DashboardStats {\n  totalLeads: number\n  activeConversations: number\n  appointmentsToday: number\n  conversionRate: number\n  responseTime: number\n  messagesSent: number\n  templatesUsed: number\n  wabaStatus: 'connected' | 'disconnected' | 'error'\n}\n\nexport interface RecentActivity {\n  id: string\n  type: 'message' | 'appointment' | 'lead_status' | 'system'\n  title: string\n  description: string\n  timestamp: string\n  leadName?: string\n  phoneNumber?: string\n  status?: string\n}\n\nexport interface PerformanceMetrics {\n  period: 'today' | 'week' | 'month'\n  leadsGenerated: number\n  appointmentsBooked: number\n  conversionRate: number\n  averageResponseTime: number\n  messageVolume: number\n  topPerformingTemplates: Array<{\n    name: string\n    usage: number\n    responseRate: number\n  }>\n}\n\nclass DashboardApi {\n  /**\n   * Get dashboard statistics for agent\n   */\n  async getAgentStats(agentId?: string): Promise<DashboardStats> {\n    const response = await apiClient.get('/api/dashboard/agent/stats', {\n      params: agentId ? { agentId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get admin dashboard statistics\n   */\n  async getAdminStats(organizationId?: string): Promise<DashboardStats & {\n    totalAgents: number\n    activeAgents: number\n    totalCost: number\n    costPerLead: number\n  }> {\n    const response = await apiClient.get('/api/dashboard/admin/stats', {\n      params: organizationId ? { organizationId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get recent activity for agent\n   */\n  async getRecentActivity(agentId?: string, limit = 10): Promise<RecentActivity[]> {\n    const response = await apiClient.get('/api/dashboard/agent/activity', {\n      params: {\n        agentId,\n        limit\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get performance metrics\n   */\n  async getPerformanceMetrics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<PerformanceMetrics> {\n    const response = await apiClient.get('/api/dashboard/performance', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get WABA connection status\n   */\n  async getWABAStatus(agentId?: string): Promise<{\n    status: 'connected' | 'disconnected' | 'error'\n    phoneNumber?: string\n    displayName?: string\n    lastSync?: string\n    errorMessage?: string\n  }> {\n    const response = await apiClient.get('/api/dashboard/waba/status', {\n      params: agentId ? { agentId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation analytics\n   */\n  async getConversationAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalConversations: number\n    activeConversations: number\n    averageMessagesPerConversation: number\n    averageConversationDuration: number\n    conversionFunnel: Array<{\n      stage: string\n      count: number\n      percentage: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/conversations/analytics', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment analytics\n   */\n  async getAppointmentAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalAppointments: number\n    completedAppointments: number\n    cancelledAppointments: number\n    noShowRate: number\n    averageBookingTime: number\n    upcomingAppointments: Array<{\n      id: string\n      leadName: string\n      appointmentTime: string\n      status: string\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/appointments/analytics', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get cost analytics (admin only)\n   */\n  async getCostAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    organizationId?: string\n  ): Promise<{\n    totalCost: number\n    costPerLead: number\n    costPerAppointment: number\n    costBreakdown: Array<{\n      category: string\n      amount: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      cost: number\n      leads: number\n      appointments: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/costs/analytics', {\n      params: {\n        period,\n        organizationId\n      }\n    })\n    return response.data.data\n  }\n}\n\nexport const dashboardApi = new DashboardApi()\n"],"names":[],"mappings":";;;AAAA;;AAsCA,MAAM;IACJ;;GAEC,GACD,MAAM,cAAc,OAAgB,EAA2B;QAC7D,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,UAAU;gBAAE;YAAQ,IAAI;QAClC;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,cAAc,cAAuB,EAKxC;QACD,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,iBAAiB;gBAAE;YAAe,IAAI;QAChD;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,kBAAkB,OAAgB,EAAyC;YAAvC,QAAA,iEAAQ;QAChD,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,iCAAiC;YACpE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,wBAGyB;YAF7B,SAAA,iEAAqC,QACrC;QAEA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,cAAc,OAAgB,EAMjC;QACD,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,UAAU;gBAAE;YAAQ,IAAI;QAClC;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,2BAaH;YAZD,SAAA,iEAAqC,QACrC;QAYA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,0CAA0C;YAC7E,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,0BAeH;YAdD,SAAA,iEAAqC,QACrC;QAcA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,yCAAyC;YAC5E,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,mBAkBH;YAjBD,SAAA,iEAAqC,QACrC;QAiBA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,kCAAkC;YACrE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;AACF;AAEO,MAAM,eAAe,IAAI","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/conversationsApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface Conversation {\n  id: string\n  globalLeadId: string\n  agentId: string\n  phoneNumber: string\n  leadName?: string\n  status: 'active' | 'waiting' | 'converted' | 'lost' | 'paused'\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  lastMessageAt: string\n  messageCount: number\n  unreadCount: number\n  source: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Message {\n  id: string\n  conversationId: string\n  sender: 'lead' | 'bot' | 'agent'\n  message: string\n  messageType: 'text' | 'template' | 'media' | 'interactive'\n  templateId?: string\n  templateParams?: Record<string, any>\n  mediaUrl?: string\n  mediaType?: string\n  deliveryStatus?: 'sent' | 'delivered' | 'read' | 'failed'\n  timestamp: string\n  createdAt: string\n}\n\nexport interface ConversationDetails extends Conversation {\n  messages: Message[]\n  leadProfile?: {\n    email?: string\n    budget?: string\n    timeline?: string\n    propertyPreferences?: string[]\n    notes?: string\n  }\n  appointmentHistory?: Array<{\n    id: string\n    appointmentTime: string\n    status: string\n    notes?: string\n  }>\n}\n\nexport interface SendMessageRequest {\n  conversationId: string\n  message: string\n  messageType?: 'text' | 'template'\n  templateId?: string\n  templateParams?: Record<string, any>\n}\n\nclass ConversationsApi {\n  /**\n   * Get all conversations for an agent\n   */\n  async getConversations(\n    agentId?: string,\n    status?: string,\n    limit = 50,\n    offset = 0\n  ): Promise<{\n    conversations: Conversation[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get('/api/dashboard/conversations', {\n      params: {\n        agentId,\n        status,\n        limit,\n        offset\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation details with messages\n   */\n  async getConversationDetails(conversationId: string): Promise<ConversationDetails> {\n    const response = await apiClient.get(`/api/dashboard/conversations/${conversationId}`)\n    return response.data.data\n  }\n\n  /**\n   * Get messages for a conversation\n   */\n  async getMessages(\n    conversationId: string,\n    limit = 50,\n    offset = 0\n  ): Promise<{\n    messages: Message[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get(`/api/conversations/${conversationId}/messages`, {\n      params: { limit, offset }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Send a message in a conversation\n   */\n  async sendMessage(request: SendMessageRequest): Promise<Message> {\n    const response = await apiClient.post('/api/test/send-message', {\n      conversationId: request.conversationId,\n      message: request.message,\n      messageType: request.messageType || 'text',\n      templateId: request.templateId,\n      templateParams: request.templateParams\n    })\n    return response.data.data\n  }\n\n  /**\n   * Update conversation status\n   */\n  async updateConversationStatus(\n    conversationId: string,\n    status: 'active' | 'waiting' | 'converted' | 'lost' | 'paused',\n    notes?: string\n  ): Promise<Conversation> {\n    const response = await apiClient.patch(`/api/conversations/${conversationId}/status`, {\n      status,\n      notes\n    })\n    return response.data.data\n  }\n\n  /**\n   * Update lead profile information\n   */\n  async updateLeadProfile(\n    conversationId: string,\n    profile: {\n      leadName?: string\n      email?: string\n      budget?: string\n      timeline?: string\n      propertyType?: string\n      locationPreference?: string\n      notes?: string\n    }\n  ): Promise<ConversationDetails> {\n    const response = await apiClient.patch(`/api/conversations/${conversationId}/profile`, profile)\n    return response.data.data\n  }\n\n  /**\n   * Mark messages as read\n   */\n  async markAsRead(conversationId: string, messageIds?: string[]): Promise<void> {\n    await apiClient.post(`/api/conversations/${conversationId}/read`, {\n      messageIds\n    })\n  }\n\n  /**\n   * Search conversations\n   */\n  async searchConversations(\n    query: string,\n    agentId?: string,\n    filters?: {\n      status?: string\n      dateFrom?: string\n      dateTo?: string\n      source?: string\n    }\n  ): Promise<Conversation[]> {\n    const response = await apiClient.get('/api/conversations/search', {\n      params: {\n        q: query,\n        agentId,\n        ...filters\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation analytics\n   */\n  async getConversationAnalytics(\n    conversationId: string\n  ): Promise<{\n    messageCount: number\n    averageResponseTime: number\n    conversationDuration: number\n    leadEngagement: number\n    conversionProbability: number\n    nextBestAction: string\n  }> {\n    const response = await apiClient.get(`/api/conversations/${conversationId}/analytics`)\n    return response.data.data\n  }\n\n  /**\n   * Get suggested responses for a conversation\n   */\n  async getSuggestedResponses(\n    conversationId: string,\n    context?: string\n  ): Promise<Array<{\n    type: 'text' | 'template'\n    content: string\n    templateId?: string\n    confidence: number\n    reason: string\n  }>> {\n    const response = await apiClient.get(`/api/conversations/${conversationId}/suggestions`, {\n      params: { context }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Archive a conversation\n   */\n  async archiveConversation(conversationId: string, reason?: string): Promise<void> {\n    await apiClient.post(`/api/conversations/${conversationId}/archive`, {\n      reason\n    })\n  }\n\n  /**\n   * Transfer conversation to another agent\n   */\n  async transferConversation(\n    conversationId: string,\n    targetAgentId: string,\n    notes?: string\n  ): Promise<Conversation> {\n    const response = await apiClient.post(`/api/conversations/${conversationId}/transfer`, {\n      targetAgentId,\n      notes\n    })\n    return response.data.data\n  }\n}\n\nexport const conversationsApi = new ConversationsApi()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/leadsApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface Lead {\n  id: string\n  phoneNumber: string\n  fullName?: string\n  email?: string\n  status: 'new' | 'contacted' | 'qualified' | 'appointment_set' | 'converted' | 'lost'\n  source: string\n  assignedAgentId?: string\n  agentName?: string\n  \n  // Lead qualification\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  \n  // Engagement metrics\n  messagesCount: number\n  lastInteraction: string\n  responseTimeAvg?: number\n  conversionScore?: number\n  \n  // Booking information\n  bookingAlternatives?: any\n  tentativeBookingTime?: string\n  \n  // Metadata\n  additionalNotes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface LeadDetails extends Lead {\n  conversationHistory: Array<{\n    id: string\n    agentId: string\n    agentName: string\n    messageCount: number\n    lastMessageAt: string\n    status: string\n  }>\n  appointmentHistory: Array<{\n    id: string\n    appointmentTime: string\n    status: string\n    agentName: string\n    notes?: string\n  }>\n  interactionTimeline: Array<{\n    timestamp: string\n    type: 'message' | 'status_change' | 'appointment' | 'note'\n    description: string\n    agentName?: string\n  }>\n}\n\nexport interface LeadFilters {\n  status?: string\n  source?: string\n  agentId?: string\n  dateFrom?: string\n  dateTo?: string\n  budget?: string\n  propertyType?: string\n  timeline?: string\n}\n\nexport interface CreateLeadRequest {\n  phoneNumber: string\n  fullName?: string\n  email?: string\n  source: string\n  assignedAgentId?: string\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  additionalNotes?: string\n}\n\nexport interface UpdateLeadRequest {\n  fullName?: string\n  email?: string\n  status?: string\n  assignedAgentId?: string\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  additionalNotes?: string\n}\n\nclass LeadsApi {\n  /**\n   * Get all leads with filtering and pagination\n   */\n  async getLeads(\n    filters?: LeadFilters,\n    limit = 50,\n    offset = 0,\n    sortBy = 'lastInteraction',\n    sortOrder: 'asc' | 'desc' = 'desc'\n  ): Promise<{\n    leads: Lead[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get('/api/leads', {\n      params: {\n        ...filters,\n        limit,\n        offset,\n        sortBy,\n        sortOrder\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get lead details with full history\n   */\n  async getLeadDetails(leadId: string): Promise<LeadDetails> {\n    const response = await apiClient.get(`/api/leads/${leadId}`)\n    return response.data.data\n  }\n\n  /**\n   * Create a new lead\n   */\n  async createLead(request: CreateLeadRequest): Promise<Lead> {\n    const response = await apiClient.post('/api/leads', request)\n    return response.data.data\n  }\n\n  /**\n   * Update lead information\n   */\n  async updateLead(leadId: string, request: UpdateLeadRequest): Promise<Lead> {\n    const response = await apiClient.patch(`/api/leads/${leadId}`, request)\n    return response.data.data\n  }\n\n  /**\n   * Update lead status\n   */\n  async updateLeadStatus(\n    leadId: string,\n    status: string,\n    notes?: string\n  ): Promise<Lead> {\n    const response = await apiClient.patch(`/api/leads/${leadId}/status`, {\n      status,\n      notes\n    })\n    return response.data.data\n  }\n\n  /**\n   * Assign lead to agent\n   */\n  async assignLead(leadId: string, agentId: string, notes?: string): Promise<Lead> {\n    const response = await apiClient.post(`/api/leads/${leadId}/assign`, {\n      agentId,\n      notes\n    })\n    return response.data.data\n  }\n\n  /**\n   * Search leads\n   */\n  async searchLeads(\n    query: string,\n    filters?: LeadFilters\n  ): Promise<Lead[]> {\n    const response = await apiClient.get('/api/leads/search', {\n      params: {\n        q: query,\n        ...filters\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get lead analytics\n   */\n  async getLeadAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalLeads: number\n    newLeads: number\n    qualifiedLeads: number\n    convertedLeads: number\n    conversionRate: number\n    averageResponseTime: number\n    leadSources: Array<{\n      source: string\n      count: number\n      percentage: number\n    }>\n    statusDistribution: Array<{\n      status: string\n      count: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      newLeads: number\n      convertedLeads: number\n      conversionRate: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/leads/analytics', {\n      params: { period, agentId }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get lead scoring and recommendations\n   */\n  async getLeadScore(leadId: string): Promise<{\n    score: number\n    factors: Array<{\n      factor: string\n      impact: number\n      description: string\n    }>\n    recommendations: Array<{\n      action: string\n      priority: 'high' | 'medium' | 'low'\n      description: string\n    }>\n    nextBestAction: string\n  }> {\n    const response = await apiClient.get(`/api/leads/${leadId}/score`)\n    return response.data.data\n  }\n\n  /**\n   * Add note to lead\n   */\n  async addNote(leadId: string, note: string, isPrivate = false): Promise<void> {\n    await apiClient.post(`/api/leads/${leadId}/notes`, {\n      note,\n      isPrivate\n    })\n  }\n\n  /**\n   * Get lead notes\n   */\n  async getNotes(leadId: string): Promise<Array<{\n    id: string\n    note: string\n    isPrivate: boolean\n    agentName: string\n    createdAt: string\n  }>> {\n    const response = await apiClient.get(`/api/leads/${leadId}/notes`)\n    return response.data.data\n  }\n\n  /**\n   * Export leads to CSV\n   */\n  async exportLeads(filters?: LeadFilters): Promise<Blob> {\n    const response = await apiClient.get('/api/leads/export', {\n      params: filters,\n      responseType: 'blob'\n    })\n    return response.data\n  }\n\n  /**\n   * Bulk update leads\n   */\n  async bulkUpdateLeads(\n    leadIds: string[],\n    updates: {\n      status?: string\n      assignedAgentId?: string\n      tags?: string[]\n    }\n  ): Promise<{ updated: number; failed: number }> {\n    const response = await apiClient.post('/api/leads/bulk-update', {\n      leadIds,\n      updates\n    })\n    return response.data.data\n  }\n\n  /**\n   * Delete a lead\n   */\n  async deleteLead(leadId: string): Promise<void> {\n    await apiClient.delete(`/api/leads/${leadId}`)\n  }\n}\n\nexport const leadsApi = new LeadsApi()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/appointmentsApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface Appointment {\n  id: string\n  leadId: string\n  agentId: string\n  leadName?: string\n  phoneNumber?: string\n  agentName?: string\n  appointmentTime: string\n  durationMinutes: number\n  status: 'scheduled' | 'confirmed' | 'completed' | 'cancelled' | 'rescheduled' | 'no_show'\n  \n  // Meeting details\n  zoomMeetingId?: string\n  zoomJoinUrl?: string\n  zoomPassword?: string\n  calendarEventId?: string\n  \n  // Consultation context\n  consultationNotes?: string\n  leadRequirements?: string\n  propertyInterest?: string\n  \n  // Metadata\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface AppointmentDetails extends Appointment {\n  leadDetails: {\n    fullName?: string\n    email?: string\n    phoneNumber: string\n    budget?: string\n    propertyType?: string\n    locationPreference?: string\n    timeline?: string\n  }\n  conversationHistory: Array<{\n    id: string\n    lastMessageAt: string\n    messageCount: number\n  }>\n  previousAppointments: Array<{\n    id: string\n    appointmentTime: string\n    status: string\n    notes?: string\n  }>\n}\n\nexport interface CreateAppointmentRequest {\n  leadId: string\n  agentId?: string\n  appointmentTime: string\n  durationMinutes?: number\n  consultationNotes?: string\n  leadRequirements?: string\n  propertyInterest?: string\n  createZoomMeeting?: boolean\n  addToCalendar?: boolean\n}\n\nexport interface UpdateAppointmentRequest {\n  appointmentTime?: string\n  durationMinutes?: number\n  status?: string\n  consultationNotes?: string\n  leadRequirements?: string\n  propertyInterest?: string\n}\n\nexport interface AvailableSlot {\n  startTime: string\n  endTime: string\n  duration: number\n  agentId: string\n  agentName: string\n}\n\nexport interface AppointmentFilters {\n  status?: string\n  agentId?: string\n  dateFrom?: string\n  dateTo?: string\n  leadId?: string\n}\n\nclass AppointmentsApi {\n  /**\n   * Get all appointments with filtering and pagination\n   */\n  async getAppointments(\n    filters?: AppointmentFilters,\n    limit = 50,\n    offset = 0,\n    sortBy = 'appointmentTime',\n    sortOrder: 'asc' | 'desc' = 'asc'\n  ): Promise<{\n    appointments: Appointment[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get('/api/appointments', {\n      params: {\n        ...filters,\n        limit,\n        offset,\n        sortBy,\n        sortOrder\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment details\n   */\n  async getAppointmentDetails(appointmentId: string): Promise<AppointmentDetails> {\n    const response = await apiClient.get(`/api/appointments/${appointmentId}`)\n    return response.data.data\n  }\n\n  /**\n   * Create a new appointment\n   */\n  async createAppointment(request: CreateAppointmentRequest): Promise<Appointment> {\n    const response = await apiClient.post('/api/appointments', request)\n    return response.data.data\n  }\n\n  /**\n   * Update appointment\n   */\n  async updateAppointment(\n    appointmentId: string,\n    request: UpdateAppointmentRequest\n  ): Promise<Appointment> {\n    const response = await apiClient.patch(`/api/appointments/${appointmentId}`, request)\n    return response.data.data\n  }\n\n  /**\n   * Cancel appointment\n   */\n  async cancelAppointment(\n    appointmentId: string,\n    reason?: string,\n    notifyLead = true\n  ): Promise<Appointment> {\n    const response = await apiClient.post(`/api/appointments/${appointmentId}/cancel`, {\n      reason,\n      notifyLead\n    })\n    return response.data.data\n  }\n\n  /**\n   * Reschedule appointment\n   */\n  async rescheduleAppointment(\n    appointmentId: string,\n    newTime: string,\n    reason?: string,\n    notifyLead = true\n  ): Promise<Appointment> {\n    const response = await apiClient.post(`/api/appointments/${appointmentId}/reschedule`, {\n      newTime,\n      reason,\n      notifyLead\n    })\n    return response.data.data\n  }\n\n  /**\n   * Mark appointment as completed\n   */\n  async completeAppointment(\n    appointmentId: string,\n    notes?: string,\n    outcome?: 'interested' | 'not_interested' | 'follow_up_required'\n  ): Promise<Appointment> {\n    const response = await apiClient.post(`/api/appointments/${appointmentId}/complete`, {\n      notes,\n      outcome\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get available time slots for booking\n   */\n  async getAvailableSlots(\n    agentId?: string,\n    date?: string,\n    duration = 60\n  ): Promise<AvailableSlot[]> {\n    const response = await apiClient.get('/api/appointments/available-slots', {\n      params: {\n        agentId,\n        date,\n        duration\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Check slot availability\n   */\n  async checkSlotAvailability(\n    agentId: string,\n    startTime: string,\n    duration = 60\n  ): Promise<{\n    available: boolean\n    conflicts?: Array<{\n      type: 'appointment' | 'calendar_event'\n      title: string\n      startTime: string\n      endTime: string\n    }>\n    suggestedAlternatives?: AvailableSlot[]\n  }> {\n    const response = await apiClient.get('/api/appointments/check-availability', {\n      params: {\n        agentId,\n        startTime,\n        duration\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment analytics\n   */\n  async getAppointmentAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalAppointments: number\n    completedAppointments: number\n    cancelledAppointments: number\n    noShowAppointments: number\n    completionRate: number\n    noShowRate: number\n    averageBookingLeadTime: number\n    upcomingAppointments: number\n    statusDistribution: Array<{\n      status: string\n      count: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      scheduled: number\n      completed: number\n      cancelled: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/appointments/analytics', {\n      params: { period, agentId }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get today's appointments\n   */\n  async getTodaysAppointments(agentId?: string): Promise<Appointment[]> {\n    const response = await apiClient.get('/api/appointments/today', {\n      params: { agentId }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get upcoming appointments\n   */\n  async getUpcomingAppointments(\n    agentId?: string,\n    days = 7\n  ): Promise<Appointment[]> {\n    const response = await apiClient.get('/api/appointments/upcoming', {\n      params: { agentId, days }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Send appointment reminder\n   */\n  async sendReminder(\n    appointmentId: string,\n    type: 'sms' | 'whatsapp' | 'email' = 'whatsapp'\n  ): Promise<void> {\n    await apiClient.post(`/api/appointments/${appointmentId}/reminder`, {\n      type\n    })\n  }\n\n  /**\n   * Get appointment conflicts\n   */\n  async getConflicts(agentId: string, date?: string): Promise<Array<{\n    appointmentId: string\n    conflictType: 'overlap' | 'back_to_back' | 'calendar_conflict'\n    description: string\n    severity: 'high' | 'medium' | 'low'\n  }>> {\n    const response = await apiClient.get('/api/appointments/conflicts', {\n      params: { agentId, date }\n    })\n    return response.data.data\n  }\n}\n\nexport const appointmentsApi = new AppointmentsApi()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/index.ts"],"sourcesContent":["// Export all API services\nexport * from './dashboardApi'\nexport * from './conversationsApi'\nexport * from './leadsApi'\nexport * from './appointmentsApi'\nexport * from './integrationsApi'\n\n// Re-export the main API client\nexport { apiClient } from '../client'\n\n// Re-export auth API\nexport * from '../../auth/authApi'\n"],"names":[],"mappings":"AAAA,0BAA0B;;AAC1B;AACA;AACA;AACA;AACA;AAEA,gCAAgC;AAChC;AAEA,qBAAqB;AACrB","debugId":null}},
    {"offset": {"line": 575, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/ConversationList.tsx"],"sourcesContent":["'use client'\n\nimport { formatDistanceToNow } from 'date-fns'\nimport clsx from 'clsx'\n\ninterface Conversation {\n  id: string\n  leadId: string\n  leadName: string\n  phoneNumber: string\n  status: 'new' | 'qualified' | 'booked' | 'lost'\n  lastMessage: string\n  lastMessageTime: string\n  unreadCount: number\n  intent?: string\n  avatar?: string\n}\n\ninterface ConversationListProps {\n  conversations: Conversation[]\n  selectedConversation: Conversation | null\n  onConversationSelect: (conversation: Conversation) => void\n}\n\nexport function ConversationList({\n  conversations,\n  selectedConversation,\n  onConversationSelect,\n}: ConversationListProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800'\n      case 'qualified':\n        return 'bg-green-100 text-green-800'\n      case 'booked':\n        return 'bg-purple-100 text-purple-800'\n      case 'lost':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getIntentIcon = (intent?: string) => {\n    switch (intent) {\n      case 'buy':\n        return '🏠'\n      case 'rent':\n        return '🔑'\n      case 'browse':\n        return '👀'\n      case 'invest':\n        return '💰'\n      default:\n        return '💬'\n    }\n  }\n\n  const formatTime = (timeString: string) => {\n    // Handle relative time strings like \"2 minutes ago\"\n    if (timeString.includes('ago') || timeString.includes('Just now')) {\n      return timeString\n    }\n    \n    try {\n      const date = new Date(timeString)\n      return formatDistanceToNow(date, { addSuffix: true })\n    } catch {\n      return timeString\n    }\n  }\n\n  return (\n    <div className=\"divide-y divide-gray-100\">\n      {conversations.map((conversation) => (\n        <div\n          key={conversation.id}\n          onClick={() => onConversationSelect(conversation)}\n          className={clsx(\n            'p-4 cursor-pointer transition-colors hover:bg-gray-50',\n            selectedConversation?.id === conversation.id && 'bg-primary-50 border-r-2 border-primary-500'\n          )}\n        >\n          <div className=\"flex items-start space-x-3\">\n            {/* Avatar */}\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-10 w-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                {conversation.avatar ? (\n                  <img\n                    src={conversation.avatar}\n                    alt={conversation.leadName}\n                    className=\"h-10 w-10 rounded-full\"\n                  />\n                ) : (\n                  <span className=\"text-sm font-medium text-primary-700\">\n                    {conversation.leadName.charAt(0)}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center justify-between mb-1\">\n                <div className=\"flex items-center space-x-2\">\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">\n                    {conversation.leadName}\n                  </p>\n                  <span className=\"text-xs\">\n                    {getIntentIcon(conversation.intent)}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {conversation.unreadCount > 0 && (\n                    <span className=\"bg-primary-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                      {conversation.unreadCount}\n                    </span>\n                  )}\n                  <span className={clsx(\n                    'inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium',\n                    getStatusColor(conversation.status)\n                  )}>\n                    {conversation.status}\n                  </span>\n                </div>\n              </div>\n\n              <p className=\"text-xs text-gray-500 mb-2\">\n                {conversation.phoneNumber}\n              </p>\n\n              <p className=\"text-sm text-gray-600 truncate mb-1\">\n                {conversation.lastMessage}\n              </p>\n\n              <p className=\"text-xs text-gray-400\">\n                {formatTime(conversation.lastMessageTime)}\n              </p>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAwBO,SAAS,iBAAiB,KAIT;QAJS,EAC/B,aAAa,EACb,oBAAoB,EACpB,oBAAoB,EACE,GAJS;IAK/B,MAAM,iBAAiB,CAAC;QACtB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,oDAAoD;QACpD,IAAI,WAAW,QAAQ,CAAC,UAAU,WAAW,QAAQ,CAAC,aAAa;YACjE,OAAO;QACT;QAEA,IAAI;YACF,MAAM,OAAO,IAAI,KAAK;YACtB,OAAO,CAAA,GAAA,sJAAA,CAAA,sBAAmB,AAAD,EAAE,MAAM;gBAAE,WAAW;YAAK;QACrD,EAAE,UAAM;YACN,OAAO;QACT;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACZ,cAAc,GAAG,CAAC,CAAC,6BAClB,6LAAC;gBAEC,SAAS,IAAM,qBAAqB;gBACpC,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EACZ,yDACA,CAAA,iCAAA,2CAAA,qBAAsB,EAAE,MAAK,aAAa,EAAE,IAAI;0BAGlD,cAAA,6LAAC;oBAAI,WAAU;;sCAEb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAI,WAAU;0CACZ,aAAa,MAAM,iBAClB,6LAAC;oCACC,KAAK,aAAa,MAAM;oCACxB,KAAK,aAAa,QAAQ;oCAC1B,WAAU;;;;;yDAGZ,6LAAC;oCAAK,WAAU;8CACb,aAAa,QAAQ,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;sCAOtC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAE,WAAU;8DACV,aAAa,QAAQ;;;;;;8DAExB,6LAAC;oDAAK,WAAU;8DACb,cAAc,aAAa,MAAM;;;;;;;;;;;;sDAGtC,6LAAC;4CAAI,WAAU;;gDACZ,aAAa,WAAW,GAAG,mBAC1B,6LAAC;oDAAK,WAAU;8DACb,aAAa,WAAW;;;;;;8DAG7B,6LAAC;oDAAK,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EAClB,yEACA,eAAe,aAAa,MAAM;8DAEjC,aAAa,MAAM;;;;;;;;;;;;;;;;;;8CAK1B,6LAAC;oCAAE,WAAU;8CACV,aAAa,WAAW;;;;;;8CAG3B,6LAAC;oCAAE,WAAU;8CACV,aAAa,WAAW;;;;;;8CAG3B,6LAAC;oCAAE,WAAU;8CACV,WAAW,aAAa,eAAe;;;;;;;;;;;;;;;;;;eA5DzC,aAAa,EAAE;;;;;;;;;;AAoE9B;KAzHgB","debugId":null}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/ConversationView.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useRef, useEffect } from 'react'\nimport { format } from 'date-fns'\nimport {\n  PaperAirplaneIcon,\n  PhoneIcon,\n  CalendarDaysIcon,\n  InformationCircleIcon,\n  EllipsisVerticalIcon,\n} from '@heroicons/react/24/outline'\nimport { Menu, Transition } from '@headlessui/react'\nimport { Fragment } from 'react'\nimport clsx from 'clsx'\n\ninterface Conversation {\n  id: string\n  leadId: string\n  leadName: string\n  phoneNumber: string\n  status: 'new' | 'qualified' | 'booked' | 'lost'\n  lastMessage: string\n  lastMessageTime: string\n  unreadCount: number\n  intent?: string\n  avatar?: string\n}\n\ninterface Message {\n  id: string\n  conversationId: string\n  sender: 'lead' | 'bot' | 'agent'\n  message: string\n  timestamp: string\n  messageType: 'text' | 'template' | 'media'\n  templateName?: string\n  status?: 'sent' | 'delivered' | 'read'\n}\n\ninterface ConversationViewProps {\n  conversation: Conversation\n  messages: Message[]\n  onSendMessage: (message: string) => void\n  connected: boolean\n}\n\nexport function ConversationView({\n  conversation,\n  messages,\n  onSendMessage,\n  connected,\n}: ConversationViewProps) {\n  const [newMessage, setNewMessage] = useState('')\n  const [isTyping, setIsTyping] = useState(false)\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const inputRef = useRef<HTMLTextAreaElement>(null)\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [messages])\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto'\n      inputRef.current.style.height = `${inputRef.current.scrollHeight}px`\n    }\n  }, [newMessage])\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || !connected) return\n\n    onSendMessage(newMessage.trim())\n    setNewMessage('')\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  const getMessageStatusIcon = (status?: string) => {\n    switch (status) {\n      case 'sent':\n        return '✓'\n      case 'delivered':\n        return '✓✓'\n      case 'read':\n        return '✓✓'\n      default:\n        return ''\n    }\n  }\n\n  const getSenderName = (sender: string) => {\n    switch (sender) {\n      case 'lead':\n        return conversation.leadName\n      case 'bot':\n        return 'Doro (Bot)'\n      case 'agent':\n        return 'You'\n      default:\n        return sender\n    }\n  }\n\n  const getSenderColor = (sender: string) => {\n    switch (sender) {\n      case 'lead':\n        return 'text-gray-900'\n      case 'bot':\n        return 'text-primary-600'\n      case 'agent':\n        return 'text-green-600'\n      default:\n        return 'text-gray-900'\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800'\n      case 'qualified':\n        return 'bg-green-100 text-green-800'\n      case 'booked':\n        return 'bg-purple-100 text-purple-800'\n      case 'lost':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-10 w-10 bg-primary-100 rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary-700\">\n                {conversation.leadName.charAt(0)}\n              </span>\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {conversation.leadName}\n              </h2>\n              <div className=\"flex items-center space-x-2\">\n                <p className=\"text-sm text-gray-500\">{conversation.phoneNumber}</p>\n                <span className={clsx(\n                  'inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium',\n                  getStatusColor(conversation.status)\n                )}>\n                  {conversation.status}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <button className=\"btn-ghost p-2\">\n              <PhoneIcon className=\"h-5 w-5\" />\n            </button>\n            <button className=\"btn-ghost p-2\">\n              <CalendarDaysIcon className=\"h-5 w-5\" />\n            </button>\n            <button className=\"btn-ghost p-2\">\n              <InformationCircleIcon className=\"h-5 w-5\" />\n            </button>\n\n            <Menu as=\"div\" className=\"relative\">\n              <Menu.Button className=\"btn-ghost p-2\">\n                <EllipsisVerticalIcon className=\"h-5 w-5\" />\n              </Menu.Button>\n\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-lg bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        className={clsx(\n                          active ? 'bg-gray-100' : '',\n                          'block w-full px-4 py-2 text-left text-sm text-gray-700'\n                        )}\n                      >\n                        View Lead Profile\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        className={clsx(\n                          active ? 'bg-gray-100' : '',\n                          'block w-full px-4 py-2 text-left text-sm text-gray-700'\n                        )}\n                      >\n                        Schedule Appointment\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        className={clsx(\n                          active ? 'bg-gray-100' : '',\n                          'block w-full px-4 py-2 text-left text-sm text-gray-700'\n                        )}\n                      >\n                        Export Conversation\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\n        {messages.map((message, index) => {\n          const isFromLead = message.sender === 'lead'\n          const isFromBot = message.sender === 'bot'\n          const previousMessage = messages[index - 1]\n          const showTimestamp = index === 0 ||\n            (previousMessage && new Date(message.timestamp).getTime() - new Date(previousMessage.timestamp).getTime() > 300000) // 5 minutes\n\n          return (\n            <div key={message.id}>\n              {showTimestamp && (\n                <div className=\"text-center text-xs text-gray-500 mb-4\">\n                  {format(new Date(message.timestamp), 'MMM d, yyyy h:mm a')}\n                </div>\n              )}\n\n              <div className={clsx(\n                'flex',\n                isFromLead ? 'justify-start' : 'justify-end'\n              )}>\n                <div className={clsx(\n                  'max-w-xs lg:max-w-md px-4 py-2 rounded-2xl',\n                  isFromLead \n                    ? 'bg-white text-gray-900 rounded-bl-sm' \n                    : isFromBot\n                    ? 'bg-primary-100 text-primary-900 rounded-br-sm'\n                    : 'bg-primary-600 text-white rounded-br-sm'\n                )}>\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className={clsx(\n                      'text-xs font-medium',\n                      getSenderColor(message.sender)\n                    )}>\n                      {getSenderName(message.sender)}\n                    </span>\n                    {message.templateName && (\n                      <span className=\"text-xs text-gray-500 ml-2\">\n                        Template: {message.templateName}\n                      </span>\n                    )}\n                  </div>\n                  \n                  <p className=\"text-sm whitespace-pre-wrap\">{message.message}</p>\n                  \n                  <div className=\"flex items-center justify-between mt-1\">\n                    <span className=\"text-xs opacity-70\">\n                      {format(new Date(message.timestamp), 'h:mm a')}\n                    </span>\n                    {!isFromLead && (\n                      <span className=\"text-xs opacity-70\">\n                        {getMessageStatusIcon(message.status)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n\n        {isTyping && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-white text-gray-900 px-4 py-2 rounded-2xl rounded-bl-sm\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <div className=\"p-4 border-t border-gray-200 bg-white\">\n        <div className=\"flex items-end space-x-3\">\n          <div className=\"flex-1\">\n            <textarea\n              ref={inputRef}\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={connected ? \"Type a message...\" : \"Disconnected - cannot send messages\"}\n              disabled={!connected}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100 disabled:cursor-not-allowed\"\n              rows={1}\n              style={{ minHeight: '40px', maxHeight: '120px' }}\n            />\n          </div>\n          <button\n            onClick={handleSendMessage}\n            disabled={!newMessage.trim() || !connected}\n            className=\"btn-primary p-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <PaperAirplaneIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {!connected && (\n          <p className=\"text-xs text-red-500 mt-2\">\n            Connection lost. Trying to reconnect...\n          </p>\n        )}\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1386, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/ConversationSearch.tsx"],"sourcesContent":["'use client'\n\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/outline'\n\ninterface ConversationSearchProps {\n  searchQuery: string\n  onSearchChange: (query: string) => void\n  statusFilter: string\n  onStatusFilterChange: (status: string) => void\n}\n\nexport function ConversationSearch({\n  searchQuery,\n  onSearchChange,\n  statusFilter,\n  onStatusFilterChange,\n}: ConversationSearchProps) {\n  const statusOptions = [\n    { value: 'all', label: 'All Status', count: 0 },\n    { value: 'new', label: 'New', count: 0 },\n    { value: 'qualified', label: 'Qualified', count: 0 },\n    { value: 'booked', label: 'Booked', count: 0 },\n    { value: 'lost', label: 'Lost', count: 0 },\n  ]\n\n  return (\n    <div className=\"space-y-3 mb-4\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <MagnifyingGlassIcon className=\"h-4 w-4 text-gray-400\" />\n        </div>\n        <input\n          type=\"text\"\n          className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg text-sm placeholder-gray-500 focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\"\n          placeholder=\"Search conversations...\"\n          value={searchQuery}\n          onChange={(e) => onSearchChange(e.target.value)}\n        />\n      </div>\n\n      {/* Status Filter */}\n      <div className=\"flex flex-wrap gap-1\">\n        {statusOptions.map((option) => (\n          <button\n            key={option.value}\n            onClick={() => onStatusFilterChange(option.value)}\n            className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${\n              statusFilter === option.value\n                ? 'bg-primary-100 text-primary-700'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            {option.label}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAWO,SAAS,mBAAmB,KAKT;QALS,EACjC,WAAW,EACX,cAAc,EACd,YAAY,EACZ,oBAAoB,EACI,GALS;IAMjC,MAAM,gBAAgB;QACpB;YAAE,OAAO;YAAO,OAAO;YAAc,OAAO;QAAE;QAC9C;YAAE,OAAO;YAAO,OAAO;YAAO,OAAO;QAAE;QACvC;YAAE,OAAO;YAAa,OAAO;YAAa,OAAO;QAAE;QACnD;YAAE,OAAO;YAAU,OAAO;YAAU,OAAO;QAAE;QAC7C;YAAE,OAAO;YAAQ,OAAO;YAAQ,OAAO;QAAE;KAC1C;IAED,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,wOAAA,CAAA,sBAAmB;4BAAC,WAAU;;;;;;;;;;;kCAEjC,6LAAC;wBACC,MAAK;wBACL,WAAU;wBACV,aAAY;wBACZ,OAAO;wBACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;0BAKlD,6LAAC;gBAAI,WAAU;0BACZ,cAAc,GAAG,CAAC,CAAC,uBAClB,6LAAC;wBAEC,SAAS,IAAM,qBAAqB,OAAO,KAAK;wBAChD,WAAW,AAAC,gEAIX,OAHC,iBAAiB,OAAO,KAAK,GACzB,oCACA;kCAGL,OAAO,KAAK;uBARR,OAAO,KAAK;;;;;;;;;;;;;;;;AAc7B;KAhDgB","debugId":null}},
    {"offset": {"line": 1495, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,KAA4C;QAA5C,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB,GAA5C;IACb,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 1544, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/ui/resizable.tsx"],"sourcesContent":["import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,sBAAsB;QAAC,EAC3B,SAAS,EACT,GAAG,OACwD;yBAC3D,6LAAC,wNAAA,CAAA,aAA6B;QAC5B,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,qEACA;QAED,GAAG,KAAK;;;;;;;KATP;AAaN,MAAM,iBAAiB,wNAAA,CAAA,QAAwB;AAE/C,MAAM,kBAAkB;QAAC,EACvB,UAAU,EACV,SAAS,EACT,GAAG,OAGJ;yBACC,6LAAC,wNAAA,CAAA,oBAAoC;QACnC,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,2oBACA;QAED,GAAG,KAAK;kBAER,4BACC,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC,yNAAA,CAAA,eAAY;gBAAC,WAAU;;;;;;;;;;;;;;;;;MAhB1B","debugId":null}},
    {"offset": {"line": 1609, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/app/agent/conversations/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport { useAuth } from '@/lib/auth/AuthContext'\r\nimport { useSocket } from '@/lib/socket/SocketContext'\r\nimport { conversationsApi, type Conversation, type ConversationDetails } from '@/lib/api/services'\r\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner'\r\nimport { ConversationList } from '@/components/agent/ConversationList'\r\nimport { ConversationView } from '@/components/agent/ConversationView'\r\nimport { ConversationSearch } from '@/components/agent/ConversationSearch'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { ResizablePanelGroup, ResizablePanel, ResizableHandle } from '@/components/ui/resizable'\r\nimport {\r\n  Search,\r\n  Filter,\r\n  MessageSquare,\r\n  Circle,\r\n} from 'lucide-react'\r\n\r\n// Use the API types instead of local interfaces\r\n\r\n\r\nexport default function ConversationsPage() {\r\n  const { user } = useAuth()\r\n  const { socket, connected } = useSocket()\r\n  const [conversations, setConversations] = useState<Conversation[]>([])\r\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null)\r\n  const [conversationDetails, setConversationDetails] = useState<ConversationDetails | null>(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [loadingMessages, setLoadingMessages] = useState(false)\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [statusFilter, setStatusFilter] = useState<string>('all')\r\n  const [showSearch, setShowSearch] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  // Load conversations from API\r\n  const loadConversations = async () => {\r\n    if (!user?.id) return\r\n\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n      const response = await conversationsApi.getConversations(user.id, statusFilter === 'all' ? undefined : statusFilter)\r\n      setConversations(response.conversations)\r\n    } catch (err) {\r\n      console.error('Failed to load conversations:', err)\r\n      setError('Failed to load conversations')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Load conversation details and messages\r\n  const loadConversationDetails = async (conversationId: string) => {\r\n    try {\r\n      setLoadingMessages(true)\r\n      const details = await conversationsApi.getConversationDetails(conversationId)\r\n      setConversationDetails(details)\r\n    } catch (err) {\r\n      console.error('Failed to load conversation details:', err)\r\n      setError('Failed to load conversation details')\r\n    } finally {\r\n      setLoadingMessages(false)\r\n    }\r\n  }\r\n\r\n  // Load conversations on mount and when user/filter changes\r\n  useEffect(() => {\r\n    loadConversations()\r\n  }, [user?.id, statusFilter])\r\n\r\n  // Filter conversations based on search and status\r\n  const filteredConversations = conversations.filter(conv => {\r\n    const matchesSearch = !searchQuery ||\r\n      (conv.leadName && conv.leadName.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n      conv.phoneNumber.includes(searchQuery)\r\n\r\n    return matchesSearch\r\n  })\r\n\r\n  // Handle conversation selection\r\n  const handleConversationSelect = async (conversation: Conversation) => {\r\n    setSelectedConversation(conversation)\r\n    await loadConversationDetails(conversation.id)\r\n\r\n    // Mark conversation as read\r\n    try {\r\n      await conversationsApi.markAsRead(conversation.id)\r\n      // Update local state to reflect read status\r\n      setConversations(prev => prev.map(conv =>\r\n        conv.id === conversation.id\r\n          ? { ...conv, unreadCount: 0 }\r\n          : conv\r\n      ))\r\n    } catch (err) {\r\n      console.error('Failed to mark conversation as read:', err)\r\n    }\r\n  }\r\n\r\n  // Real-time message handling\r\n  useEffect(() => {\r\n    if (!socket || !connected) return\r\n\r\n    const handleNewMessage = (data: any) => {\r\n      // Update conversation list\r\n      setConversations(prev => prev.map(conv =>\r\n        conv.id === data.conversationId\r\n          ? {\r\n              ...conv,\r\n              lastMessageAt: new Date().toISOString(),\r\n              unreadCount: conv.unreadCount + 1\r\n            }\r\n          : conv\r\n      ))\r\n\r\n      // Add message to current conversation details\r\n      if (conversationDetails?.id === data.conversationId) {\r\n        setConversationDetails(prev => prev ? {\r\n          ...prev,\r\n          messages: [...prev.messages, {\r\n            id: data.messageId,\r\n            conversationId: data.conversationId,\r\n            sender: data.sender,\r\n            message: data.message,\r\n            timestamp: data.timestamp,\r\n            messageType: data.messageType || 'text',\r\n            deliveryStatus: 'delivered',\r\n            createdAt: data.timestamp\r\n          }]\r\n        } : null)\r\n      }\r\n    }\r\n\r\n    socket.on('new_message', handleNewMessage)\r\n    socket.on('message_status_update', (data: any) => {\r\n      if (conversationDetails) {\r\n        setConversationDetails(prev => prev ? {\r\n          ...prev,\r\n          messages: prev.messages.map(msg =>\r\n            msg.id === data.messageId\r\n              ? { ...msg, deliveryStatus: data.status }\r\n              : msg\r\n          )\r\n        } : null)\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      socket.off('new_message', handleNewMessage)\r\n      socket.off('message_status_update')\r\n    }\r\n  }, [socket, connected, conversationDetails])\r\n\r\n  const handleSendMessage = async (message: string) => {\r\n    if (!selectedConversation) return\r\n\r\n    try {\r\n      const newMessage = await conversationsApi.sendMessage({\r\n        conversationId: selectedConversation.id,\r\n        message,\r\n        messageType: 'text'\r\n      })\r\n\r\n      // Update conversation details with new message\r\n      if (conversationDetails) {\r\n        setConversationDetails(prev => prev ? {\r\n          ...prev,\r\n          messages: [...prev.messages, newMessage]\r\n        } : null)\r\n      }\r\n\r\n      // Update conversation list\r\n      setConversations(prev => prev.map(conv =>\r\n        conv.id === selectedConversation.id\r\n          ? {\r\n              ...conv,\r\n              lastMessageAt: newMessage.timestamp\r\n            }\r\n          : conv\r\n      ))\r\n\r\n      // Send via socket for real-time updates\r\n      if (socket && connected) {\r\n        socket.emit('send_message', {\r\n        conversationId: selectedConversation.id,\r\n        leadId: selectedConversation.leadId,\r\n        message,\r\n        agentId: user?.id\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"h-full overflow-hidden\">\r\n      <ResizablePanelGroup direction=\"horizontal\" className=\"h-full\">\r\n        {/* Conversations List Panel */}\r\n        <ResizablePanel defaultSize={30} minSize={25} maxSize={50}>\r\n          <div className=\"h-full flex flex-col\">\r\n            {/* Header */}\r\n            <CardHeader className=\"pb-3\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <MessageSquare className=\"h-5 w-5\" />\r\n                  Conversations\r\n                </CardTitle>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => setShowSearch(!showSearch)}\r\n                  >\r\n                    <Search className=\"h-4 w-4\" />\r\n                  </Button>\r\n                  <Button variant=\"ghost\" size=\"sm\">\r\n                    <Filter className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Search */}\r\n              {showSearch && (\r\n                <ConversationSearch\r\n                  searchQuery={searchQuery}\r\n                  onSearchChange={setSearchQuery}\r\n                  statusFilter={statusFilter}\r\n                  onStatusFilterChange={setStatusFilter}\r\n                />\r\n              )}\r\n\r\n              {/* Stats */}\r\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\r\n                <span>{filteredConversations.length} conversations</span>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Circle className={`w-2 h-2 ${connected ? 'fill-green-500 text-green-500' : 'fill-red-500 text-red-500'}`} />\r\n                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                    {connected ? 'Online' : 'Offline'}\r\n                  </Badge>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n\r\n            {/* Conversation List */}\r\n            <CardContent className=\"flex-1 overflow-y-auto p-0\">\r\n              {error && (\r\n                <div className=\"p-4 text-center text-red-600\">\r\n                  {error}\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={loadConversations}\r\n                    className=\"ml-2\"\r\n                  >\r\n                    Retry\r\n                  </Button>\r\n                </div>\r\n              )}\r\n              {loading ? (\r\n                <div className=\"flex items-center justify-center h-32\">\r\n                  <LoadingSpinner />\r\n                </div>\r\n              ) : filteredConversations.length > 0 ? (\r\n                <ConversationList\r\n                  conversations={filteredConversations}\r\n                  selectedConversation={selectedConversation}\r\n                  onConversationSelect={handleConversationSelect}\r\n                />\r\n              ) : (\r\n                <div className=\"flex flex-col items-center justify-center h-32 text-muted-foreground p-6\">\r\n                  <MessageSquare className=\"h-8 w-8 mb-2\" />\r\n                  <p className=\"text-sm\">No conversations found</p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </div>\r\n        </ResizablePanel>\r\n\r\n        <ResizableHandle withHandle />\r\n\r\n        {/* Conversation View Panel */}\r\n        <ResizablePanel defaultSize={70}>\r\n          <div className=\"h-full flex flex-col\">\r\n            {selectedConversation && conversationDetails ? (\r\n              loadingMessages ? (\r\n                <div className=\"flex-1 flex items-center justify-center\">\r\n                  <LoadingSpinner />\r\n                </div>\r\n              ) : (\r\n                <ConversationView\r\n                  conversation={selectedConversation}\r\n                  messages={conversationDetails.messages}\r\n                  onSendMessage={handleSendMessage}\r\n                  connected={connected}\r\n                />\r\n              )\r\n            ) : selectedConversation ? (\r\n              <div className=\"flex-1 flex items-center justify-center\">\r\n                <LoadingSpinner />\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex-1 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                  <MessageSquare className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground/50\" />\r\n                  <h3 className=\"text-lg font-medium mb-2\">Select a conversation</h3>\r\n                  <p className=\"text-sm text-muted-foreground\">Choose a conversation from the list to start messaging</p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </ResizablePanel>\r\n      </ResizablePanelGroup>\r\n    </Card>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}