{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/dashboardApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface DashboardStats {\n  totalLeads: number\n  activeConversations: number\n  appointmentsToday: number\n  conversionRate: number\n  responseTime: number\n  messagesSent: number\n  templatesUsed: number\n  wabaStatus: 'connected' | 'disconnected' | 'error'\n}\n\nexport interface RecentActivity {\n  id: string\n  type: 'message' | 'appointment' | 'lead_status' | 'system'\n  title: string\n  description: string\n  timestamp: string\n  leadName?: string\n  phoneNumber?: string\n  status?: string\n}\n\nexport interface PerformanceMetrics {\n  period: 'today' | 'week' | 'month'\n  leadsGenerated: number\n  appointmentsBooked: number\n  conversionRate: number\n  averageResponseTime: number\n  messageVolume: number\n  topPerformingTemplates: Array<{\n    name: string\n    usage: number\n    responseRate: number\n  }>\n}\n\nclass DashboardApi {\n  /**\n   * Get dashboard statistics for agent\n   */\n  async getAgentStats(agentId?: string): Promise<DashboardStats> {\n    const response = await apiClient.get('/api/dashboard/agent/stats', {\n      params: agentId ? { agentId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get admin dashboard statistics\n   */\n  async getAdminStats(organizationId?: string): Promise<DashboardStats & {\n    totalAgents: number\n    activeAgents: number\n    totalCost: number\n    costPerLead: number\n  }> {\n    const response = await apiClient.get('/api/dashboard/admin/stats', {\n      params: organizationId ? { organizationId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get recent activity for agent\n   */\n  async getRecentActivity(agentId?: string, limit = 10): Promise<RecentActivity[]> {\n    const response = await apiClient.get('/api/dashboard/agent/activity', {\n      params: {\n        agentId,\n        limit\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get performance metrics\n   */\n  async getPerformanceMetrics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<PerformanceMetrics> {\n    const response = await apiClient.get('/api/dashboard/performance', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get WABA connection status\n   */\n  async getWABAStatus(agentId?: string): Promise<{\n    status: 'connected' | 'disconnected' | 'error'\n    phoneNumber?: string\n    displayName?: string\n    lastSync?: string\n    errorMessage?: string\n  }> {\n    const response = await apiClient.get('/api/dashboard/waba/status', {\n      params: agentId ? { agentId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation analytics\n   */\n  async getConversationAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalConversations: number\n    activeConversations: number\n    averageMessagesPerConversation: number\n    averageConversationDuration: number\n    conversionFunnel: Array<{\n      stage: string\n      count: number\n      percentage: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/conversations/analytics', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment analytics\n   */\n  async getAppointmentAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalAppointments: number\n    completedAppointments: number\n    cancelledAppointments: number\n    noShowRate: number\n    averageBookingTime: number\n    upcomingAppointments: Array<{\n      id: string\n      leadName: string\n      appointmentTime: string\n      status: string\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/appointments/analytics', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get cost analytics (admin only)\n   */\n  async getCostAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    organizationId?: string\n  ): Promise<{\n    totalCost: number\n    costPerLead: number\n    costPerAppointment: number\n    costBreakdown: Array<{\n      category: string\n      amount: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      cost: number\n      leads: number\n      appointments: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/costs/analytics', {\n      params: {\n        period,\n        organizationId\n      }\n    })\n    return response.data.data\n  }\n}\n\nexport const dashboardApi = new DashboardApi()\n"],"names":[],"mappings":";;;AAAA;;AAsCA,MAAM;IACJ;;GAEC,GACD,MAAM,cAAc,OAAgB,EAA2B;QAC7D,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,UAAU;gBAAE;YAAQ,IAAI;QAClC;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,cAAc,cAAuB,EAKxC;QACD,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,iBAAiB;gBAAE;YAAe,IAAI;QAChD;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,kBAAkB,OAAgB,EAAyC;YAAvC,QAAA,iEAAQ;QAChD,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,iCAAiC;YACpE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,wBAGyB;YAF7B,SAAA,iEAAqC,QACrC;QAEA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,cAAc,OAAgB,EAMjC;QACD,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,UAAU;gBAAE;YAAQ,IAAI;QAClC;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,2BAaH;YAZD,SAAA,iEAAqC,QACrC;QAYA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,0CAA0C;YAC7E,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,0BAeH;YAdD,SAAA,iEAAqC,QACrC;QAcA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,yCAAyC;YAC5E,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,mBAkBH;YAjBD,SAAA,iEAAqC,QACrC;QAiBA,MAAM,WAAW,MAAM,uHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,kCAAkC;YACrE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;AACF;AAEO,MAAM,eAAe,IAAI","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/conversationsApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface Conversation {\n  id: string\n  globalLeadId: string\n  agentId: string\n  phoneNumber: string\n  leadName?: string\n  status: 'active' | 'waiting' | 'converted' | 'lost' | 'paused'\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  lastMessageAt: string\n  messageCount: number\n  unreadCount: number\n  source: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Message {\n  id: string\n  conversationId: string\n  sender: 'lead' | 'bot' | 'agent'\n  message: string\n  messageType: 'text' | 'template' | 'media' | 'interactive'\n  templateId?: string\n  templateParams?: Record<string, any>\n  mediaUrl?: string\n  mediaType?: string\n  deliveryStatus?: 'sent' | 'delivered' | 'read' | 'failed'\n  timestamp: string\n  createdAt: string\n}\n\nexport interface ConversationDetails extends Conversation {\n  messages: Message[]\n  leadProfile?: {\n    email?: string\n    budget?: string\n    timeline?: string\n    propertyPreferences?: string[]\n    notes?: string\n  }\n  appointmentHistory?: Array<{\n    id: string\n    appointmentTime: string\n    status: string\n    notes?: string\n  }>\n}\n\nexport interface SendMessageRequest {\n  conversationId: string\n  message: string\n  messageType?: 'text' | 'template'\n  templateId?: string\n  templateParams?: Record<string, any>\n}\n\nclass ConversationsApi {\n  /**\n   * Get all conversations for an agent\n   */\n  async getConversations(\n    agentId?: string,\n    status?: string,\n    limit = 50,\n    offset = 0\n  ): Promise<{\n    conversations: Conversation[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get('/api/dashboard/conversations', {\n      params: {\n        agentId,\n        status,\n        limit,\n        offset\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation details with messages\n   */\n  async getConversationDetails(conversationId: string): Promise<ConversationDetails> {\n    const response = await apiClient.get(`/api/dashboard/conversations/${conversationId}`)\n    return response.data.data\n  }\n\n  /**\n   * Get messages for a conversation\n   */\n  async getMessages(\n    conversationId: string,\n    limit = 50,\n    offset = 0\n  ): Promise<{\n    messages: Message[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get(`/api/conversations/${conversationId}/messages`, {\n      params: { limit, offset }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Send a message in a conversation\n   */\n  async sendMessage(request: SendMessageRequest): Promise<Message> {\n    const response = await apiClient.post('/api/test/send-message', {\n      conversationId: request.conversationId,\n      message: request.message,\n      messageType: request.messageType || 'text',\n      templateId: request.templateId,\n      templateParams: request.templateParams\n    })\n    return response.data.data\n  }\n\n  /**\n   * Update conversation status\n   */\n  async updateConversationStatus(\n    conversationId: string,\n    status: 'active' | 'waiting' | 'converted' | 'lost' | 'paused',\n    notes?: string\n  ): Promise<Conversation> {\n    const response = await apiClient.patch(`/api/conversations/${conversationId}/status`, {\n      status,\n      notes\n    })\n    return response.data.data\n  }\n\n  /**\n   * Update lead profile information\n   */\n  async updateLeadProfile(\n    conversationId: string,\n    profile: {\n      leadName?: string\n      email?: string\n      budget?: string\n      timeline?: string\n      propertyType?: string\n      locationPreference?: string\n      notes?: string\n    }\n  ): Promise<ConversationDetails> {\n    const response = await apiClient.patch(`/api/conversations/${conversationId}/profile`, profile)\n    return response.data.data\n  }\n\n  /**\n   * Mark messages as read\n   */\n  async markAsRead(conversationId: string, messageIds?: string[]): Promise<void> {\n    await apiClient.post(`/api/conversations/${conversationId}/read`, {\n      messageIds\n    })\n  }\n\n  /**\n   * Search conversations\n   */\n  async searchConversations(\n    query: string,\n    agentId?: string,\n    filters?: {\n      status?: string\n      dateFrom?: string\n      dateTo?: string\n      source?: string\n    }\n  ): Promise<Conversation[]> {\n    const response = await apiClient.get('/api/conversations/search', {\n      params: {\n        q: query,\n        agentId,\n        ...filters\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation analytics\n   */\n  async getConversationAnalytics(\n    conversationId: string\n  ): Promise<{\n    messageCount: number\n    averageResponseTime: number\n    conversationDuration: number\n    leadEngagement: number\n    conversionProbability: number\n    nextBestAction: string\n  }> {\n    const response = await apiClient.get(`/api/conversations/${conversationId}/analytics`)\n    return response.data.data\n  }\n\n  /**\n   * Get suggested responses for a conversation\n   */\n  async getSuggestedResponses(\n    conversationId: string,\n    context?: string\n  ): Promise<Array<{\n    type: 'text' | 'template'\n    content: string\n    templateId?: string\n    confidence: number\n    reason: string\n  }>> {\n    const response = await apiClient.get(`/api/conversations/${conversationId}/suggestions`, {\n      params: { context }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Archive a conversation\n   */\n  async archiveConversation(conversationId: string, reason?: string): Promise<void> {\n    await apiClient.post(`/api/conversations/${conversationId}/archive`, {\n      reason\n    })\n  }\n\n  /**\n   * Transfer conversation to another agent\n   */\n  async transferConversation(\n    conversationId: string,\n    targetAgentId: string,\n    notes?: string\n  ): Promise<Conversation> {\n    const response = await apiClient.post(`/api/conversations/${conversationId}/transfer`, {\n      targetAgentId,\n      notes\n    })\n    return response.data.data\n  }\n}\n\nexport const conversationsApi = new ConversationsApi()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/leadsApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface Lead {\n  id: string\n  phoneNumber: string\n  fullName?: string\n  email?: string\n  status: 'new' | 'contacted' | 'qualified' | 'appointment_set' | 'converted' | 'lost'\n  source: string\n  assignedAgentId?: string\n  agentName?: string\n  \n  // Lead qualification\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  \n  // Engagement metrics\n  messagesCount: number\n  lastInteraction: string\n  responseTimeAvg?: number\n  conversionScore?: number\n  \n  // Booking information\n  bookingAlternatives?: any\n  tentativeBookingTime?: string\n  \n  // Metadata\n  additionalNotes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface LeadDetails extends Lead {\n  conversationHistory: Array<{\n    id: string\n    agentId: string\n    agentName: string\n    messageCount: number\n    lastMessageAt: string\n    status: string\n  }>\n  appointmentHistory: Array<{\n    id: string\n    appointmentTime: string\n    status: string\n    agentName: string\n    notes?: string\n  }>\n  interactionTimeline: Array<{\n    timestamp: string\n    type: 'message' | 'status_change' | 'appointment' | 'note'\n    description: string\n    agentName?: string\n  }>\n}\n\nexport interface LeadFilters {\n  status?: string\n  source?: string\n  agentId?: string\n  dateFrom?: string\n  dateTo?: string\n  budget?: string\n  propertyType?: string\n  timeline?: string\n}\n\nexport interface CreateLeadRequest {\n  phoneNumber: string\n  fullName?: string\n  email?: string\n  source: string\n  assignedAgentId?: string\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  additionalNotes?: string\n}\n\nexport interface UpdateLeadRequest {\n  fullName?: string\n  email?: string\n  status?: string\n  assignedAgentId?: string\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  additionalNotes?: string\n}\n\nclass LeadsApi {\n  /**\n   * Get all leads with filtering and pagination\n   */\n  async getLeads(\n    filters?: LeadFilters,\n    limit = 50,\n    offset = 0,\n    sortBy = 'lastInteraction',\n    sortOrder: 'asc' | 'desc' = 'desc'\n  ): Promise<{\n    leads: Lead[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get('/api/leads', {\n      params: {\n        ...filters,\n        limit,\n        offset,\n        sortBy,\n        sortOrder\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get lead details with full history\n   */\n  async getLeadDetails(leadId: string): Promise<LeadDetails> {\n    const response = await apiClient.get(`/api/leads/${leadId}`)\n    return response.data.data\n  }\n\n  /**\n   * Create a new lead\n   */\n  async createLead(request: CreateLeadRequest): Promise<Lead> {\n    const response = await apiClient.post('/api/leads', request)\n    return response.data.data\n  }\n\n  /**\n   * Update lead information\n   */\n  async updateLead(leadId: string, request: UpdateLeadRequest): Promise<Lead> {\n    const response = await apiClient.patch(`/api/leads/${leadId}`, request)\n    return response.data.data\n  }\n\n  /**\n   * Update lead status\n   */\n  async updateLeadStatus(\n    leadId: string,\n    status: string,\n    notes?: string\n  ): Promise<Lead> {\n    const response = await apiClient.patch(`/api/leads/${leadId}/status`, {\n      status,\n      notes\n    })\n    return response.data.data\n  }\n\n  /**\n   * Assign lead to agent\n   */\n  async assignLead(leadId: string, agentId: string, notes?: string): Promise<Lead> {\n    const response = await apiClient.post(`/api/leads/${leadId}/assign`, {\n      agentId,\n      notes\n    })\n    return response.data.data\n  }\n\n  /**\n   * Search leads\n   */\n  async searchLeads(\n    query: string,\n    filters?: LeadFilters\n  ): Promise<Lead[]> {\n    const response = await apiClient.get('/api/leads/search', {\n      params: {\n        q: query,\n        ...filters\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get lead analytics\n   */\n  async getLeadAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalLeads: number\n    newLeads: number\n    qualifiedLeads: number\n    convertedLeads: number\n    conversionRate: number\n    averageResponseTime: number\n    leadSources: Array<{\n      source: string\n      count: number\n      percentage: number\n    }>\n    statusDistribution: Array<{\n      status: string\n      count: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      newLeads: number\n      convertedLeads: number\n      conversionRate: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/leads/analytics', {\n      params: { period, agentId }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get lead scoring and recommendations\n   */\n  async getLeadScore(leadId: string): Promise<{\n    score: number\n    factors: Array<{\n      factor: string\n      impact: number\n      description: string\n    }>\n    recommendations: Array<{\n      action: string\n      priority: 'high' | 'medium' | 'low'\n      description: string\n    }>\n    nextBestAction: string\n  }> {\n    const response = await apiClient.get(`/api/leads/${leadId}/score`)\n    return response.data.data\n  }\n\n  /**\n   * Add note to lead\n   */\n  async addNote(leadId: string, note: string, isPrivate = false): Promise<void> {\n    await apiClient.post(`/api/leads/${leadId}/notes`, {\n      note,\n      isPrivate\n    })\n  }\n\n  /**\n   * Get lead notes\n   */\n  async getNotes(leadId: string): Promise<Array<{\n    id: string\n    note: string\n    isPrivate: boolean\n    agentName: string\n    createdAt: string\n  }>> {\n    const response = await apiClient.get(`/api/leads/${leadId}/notes`)\n    return response.data.data\n  }\n\n  /**\n   * Export leads to CSV\n   */\n  async exportLeads(filters?: LeadFilters): Promise<Blob> {\n    const response = await apiClient.get('/api/leads/export', {\n      params: filters,\n      responseType: 'blob'\n    })\n    return response.data\n  }\n\n  /**\n   * Bulk update leads\n   */\n  async bulkUpdateLeads(\n    leadIds: string[],\n    updates: {\n      status?: string\n      assignedAgentId?: string\n      tags?: string[]\n    }\n  ): Promise<{ updated: number; failed: number }> {\n    const response = await apiClient.post('/api/leads/bulk-update', {\n      leadIds,\n      updates\n    })\n    return response.data.data\n  }\n\n  /**\n   * Delete a lead\n   */\n  async deleteLead(leadId: string): Promise<void> {\n    await apiClient.delete(`/api/leads/${leadId}`)\n  }\n}\n\nexport const leadsApi = new LeadsApi()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/appointmentsApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface Appointment {\n  id: string\n  leadId: string\n  agentId: string\n  leadName?: string\n  phoneNumber?: string\n  agentName?: string\n  appointmentTime: string\n  durationMinutes: number\n  status: 'scheduled' | 'confirmed' | 'completed' | 'cancelled' | 'rescheduled' | 'no_show'\n  \n  // Meeting details\n  zoomMeetingId?: string\n  zoomJoinUrl?: string\n  zoomPassword?: string\n  calendarEventId?: string\n  \n  // Consultation context\n  consultationNotes?: string\n  leadRequirements?: string\n  propertyInterest?: string\n  \n  // Metadata\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface AppointmentDetails extends Appointment {\n  leadDetails: {\n    fullName?: string\n    email?: string\n    phoneNumber: string\n    budget?: string\n    propertyType?: string\n    locationPreference?: string\n    timeline?: string\n  }\n  conversationHistory: Array<{\n    id: string\n    lastMessageAt: string\n    messageCount: number\n  }>\n  previousAppointments: Array<{\n    id: string\n    appointmentTime: string\n    status: string\n    notes?: string\n  }>\n}\n\nexport interface CreateAppointmentRequest {\n  leadId: string\n  agentId?: string\n  appointmentTime: string\n  durationMinutes?: number\n  consultationNotes?: string\n  leadRequirements?: string\n  propertyInterest?: string\n  createZoomMeeting?: boolean\n  addToCalendar?: boolean\n}\n\nexport interface UpdateAppointmentRequest {\n  appointmentTime?: string\n  durationMinutes?: number\n  status?: string\n  consultationNotes?: string\n  leadRequirements?: string\n  propertyInterest?: string\n}\n\nexport interface AvailableSlot {\n  startTime: string\n  endTime: string\n  duration: number\n  agentId: string\n  agentName: string\n}\n\nexport interface AppointmentFilters {\n  status?: string\n  agentId?: string\n  dateFrom?: string\n  dateTo?: string\n  leadId?: string\n}\n\nclass AppointmentsApi {\n  /**\n   * Get all appointments with filtering and pagination\n   */\n  async getAppointments(\n    filters?: AppointmentFilters,\n    limit = 50,\n    offset = 0,\n    sortBy = 'appointmentTime',\n    sortOrder: 'asc' | 'desc' = 'asc'\n  ): Promise<{\n    appointments: Appointment[]\n    total: number\n    hasMore: boolean\n  }> {\n    const response = await apiClient.get('/api/appointments', {\n      params: {\n        ...filters,\n        limit,\n        offset,\n        sortBy,\n        sortOrder\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment details\n   */\n  async getAppointmentDetails(appointmentId: string): Promise<AppointmentDetails> {\n    const response = await apiClient.get(`/api/appointments/${appointmentId}`)\n    return response.data.data\n  }\n\n  /**\n   * Create a new appointment\n   */\n  async createAppointment(request: CreateAppointmentRequest): Promise<Appointment> {\n    const response = await apiClient.post('/api/appointments', request)\n    return response.data.data\n  }\n\n  /**\n   * Update appointment\n   */\n  async updateAppointment(\n    appointmentId: string,\n    request: UpdateAppointmentRequest\n  ): Promise<Appointment> {\n    const response = await apiClient.patch(`/api/appointments/${appointmentId}`, request)\n    return response.data.data\n  }\n\n  /**\n   * Cancel appointment\n   */\n  async cancelAppointment(\n    appointmentId: string,\n    reason?: string,\n    notifyLead = true\n  ): Promise<Appointment> {\n    const response = await apiClient.post(`/api/appointments/${appointmentId}/cancel`, {\n      reason,\n      notifyLead\n    })\n    return response.data.data\n  }\n\n  /**\n   * Reschedule appointment\n   */\n  async rescheduleAppointment(\n    appointmentId: string,\n    newTime: string,\n    reason?: string,\n    notifyLead = true\n  ): Promise<Appointment> {\n    const response = await apiClient.post(`/api/appointments/${appointmentId}/reschedule`, {\n      newTime,\n      reason,\n      notifyLead\n    })\n    return response.data.data\n  }\n\n  /**\n   * Mark appointment as completed\n   */\n  async completeAppointment(\n    appointmentId: string,\n    notes?: string,\n    outcome?: 'interested' | 'not_interested' | 'follow_up_required'\n  ): Promise<Appointment> {\n    const response = await apiClient.post(`/api/appointments/${appointmentId}/complete`, {\n      notes,\n      outcome\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get available time slots for booking\n   */\n  async getAvailableSlots(\n    agentId?: string,\n    date?: string,\n    duration = 60\n  ): Promise<AvailableSlot[]> {\n    const response = await apiClient.get('/api/appointments/available-slots', {\n      params: {\n        agentId,\n        date,\n        duration\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Check slot availability\n   */\n  async checkSlotAvailability(\n    agentId: string,\n    startTime: string,\n    duration = 60\n  ): Promise<{\n    available: boolean\n    conflicts?: Array<{\n      type: 'appointment' | 'calendar_event'\n      title: string\n      startTime: string\n      endTime: string\n    }>\n    suggestedAlternatives?: AvailableSlot[]\n  }> {\n    const response = await apiClient.get('/api/appointments/check-availability', {\n      params: {\n        agentId,\n        startTime,\n        duration\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment analytics\n   */\n  async getAppointmentAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalAppointments: number\n    completedAppointments: number\n    cancelledAppointments: number\n    noShowAppointments: number\n    completionRate: number\n    noShowRate: number\n    averageBookingLeadTime: number\n    upcomingAppointments: number\n    statusDistribution: Array<{\n      status: string\n      count: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      scheduled: number\n      completed: number\n      cancelled: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/appointments/analytics', {\n      params: { period, agentId }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get today's appointments\n   */\n  async getTodaysAppointments(agentId?: string): Promise<Appointment[]> {\n    const response = await apiClient.get('/api/appointments/today', {\n      params: { agentId }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get upcoming appointments\n   */\n  async getUpcomingAppointments(\n    agentId?: string,\n    days = 7\n  ): Promise<Appointment[]> {\n    const response = await apiClient.get('/api/appointments/upcoming', {\n      params: { agentId, days }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Send appointment reminder\n   */\n  async sendReminder(\n    appointmentId: string,\n    type: 'sms' | 'whatsapp' | 'email' = 'whatsapp'\n  ): Promise<void> {\n    await apiClient.post(`/api/appointments/${appointmentId}/reminder`, {\n      type\n    })\n  }\n\n  /**\n   * Get appointment conflicts\n   */\n  async getConflicts(agentId: string, date?: string): Promise<Array<{\n    appointmentId: string\n    conflictType: 'overlap' | 'back_to_back' | 'calendar_conflict'\n    description: string\n    severity: 'high' | 'medium' | 'low'\n  }>> {\n    const response = await apiClient.get('/api/appointments/conflicts', {\n      params: { agentId, date }\n    })\n    return response.data.data\n  }\n}\n\nexport const appointmentsApi = new AppointmentsApi()\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/index.ts"],"sourcesContent":["// Export all API services\nexport * from './dashboardApi'\nexport * from './conversationsApi'\nexport * from './leadsApi'\nexport * from './appointmentsApi'\nexport * from './integrationsApi'\n\n// Re-export the main API client\nexport { apiClient } from '../client'\n\n// Re-export auth API\nexport * from '../../auth/authApi'\n"],"names":[],"mappings":"AAAA,0BAA0B;;AAC1B;AACA;AACA;AACA;AACA;AAEA,gCAAgC;AAChC;AAEA,qBAAqB;AACrB","debugId":null}},
    {"offset": {"line": 575, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/LeadTable.tsx"],"sourcesContent":["'use client'\n\nimport { format } from 'date-fns'\nimport { Menu, Transition } from '@headlessui/react'\nimport { Fragment } from 'react'\nimport {\n  EllipsisVerticalIcon,\n  ChatBubbleLeftRightIcon,\n  PhoneIcon,\n  CalendarDaysIcon,\n} from '@heroicons/react/24/outline'\nimport clsx from 'clsx'\n\ninterface Lead {\n  id: string\n  phoneNumber: string\n  fullName: string\n  status: 'new' | 'qualified' | 'booked' | 'completed' | 'lost'\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  lastInteraction: string\n  messagesCount: number\n  createdAt: string\n  source: string\n}\n\ninterface LeadTableProps {\n  leads: Lead[]\n  selectedLeads: string[]\n  onLeadSelect: (leadId: string, selected: boolean) => void\n  onSelectAll: (selected: boolean) => void\n  onLeadClick: (lead: Lead) => void\n  onStatusUpdate: (leadId: string, status: string) => void\n}\n\nexport function LeadTable({\n  leads,\n  selectedLeads,\n  onLeadSelect,\n  onSelectAll,\n  onLeadClick,\n  onStatusUpdate,\n}: LeadTableProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800'\n      case 'qualified':\n        return 'bg-green-100 text-green-800'\n      case 'booked':\n        return 'bg-purple-100 text-purple-800'\n      case 'completed':\n        return 'bg-emerald-100 text-emerald-800'\n      case 'lost':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getIntentIcon = (intent?: string) => {\n    switch (intent) {\n      case 'buy':\n        return '🏠'\n      case 'rent':\n        return '🔑'\n      case 'browse':\n        return '👀'\n      case 'invest':\n        return '💰'\n      default:\n        return '💬'\n    }\n  }\n\n  const allSelected = leads.length > 0 && selectedLeads.length === leads.length\n  const someSelected = selectedLeads.length > 0 && selectedLeads.length < leads.length\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"bg-gray-50\">\n          <tr>\n            <th className=\"px-6 py-3 text-left\">\n              <input\n                type=\"checkbox\"\n                className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                checked={allSelected}\n                ref={(el) => {\n                  if (el) el.indeterminate = someSelected\n                }}\n                onChange={(e) => onSelectAll(e.target.checked)}\n              />\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Lead\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Status\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Intent\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Budget\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Location\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Last Contact\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Messages\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Source\n            </th>\n            <th className=\"relative px-6 py-3\">\n              <span className=\"sr-only\">Actions</span>\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {leads.map((lead) => (\n            <tr\n              key={lead.id}\n              className=\"hover:bg-gray-50 cursor-pointer\"\n              onClick={() => onLeadClick(lead)}\n            >\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <input\n                  type=\"checkbox\"\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                  checked={selectedLeads.includes(lead.id)}\n                  onChange={(e) => {\n                    e.stopPropagation()\n                    onLeadSelect(lead.id, e.target.checked)\n                  }}\n                />\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <div className=\"flex items-center\">\n                  <div className=\"h-10 w-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-primary-700\">\n                      {lead.fullName.charAt(0)}\n                    </span>\n                  </div>\n                  <div className=\"ml-4\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {lead.fullName}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {lead.phoneNumber}\n                    </div>\n                  </div>\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <span className={clsx(\n                  'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',\n                  getStatusColor(lead.status)\n                )}>\n                  {lead.status}\n                </span>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">{getIntentIcon(lead.intent)}</span>\n                  <span className=\"text-sm text-gray-900 capitalize\">\n                    {lead.intent || 'Unknown'}\n                  </span>\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                {lead.budget || '-'}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                {lead.locationPreference || '-'}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {format(new Date(lead.lastInteraction), 'MMM d, h:mm a')}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <div className=\"flex items-center text-sm text-gray-900\">\n                  <ChatBubbleLeftRightIcon className=\"h-4 w-4 mr-1 text-gray-400\" />\n                  {lead.messagesCount}\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {lead.source}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                <div className=\"flex items-center space-x-2\">\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      // Handle chat action\n                    }}\n                    className=\"text-primary-600 hover:text-primary-900\"\n                    title=\"Start conversation\"\n                  >\n                    <ChatBubbleLeftRightIcon className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      // Handle call action\n                    }}\n                    className=\"text-green-600 hover:text-green-900\"\n                    title=\"Call lead\"\n                  >\n                    <PhoneIcon className=\"h-4 w-4\" />\n                  </button>\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      // Handle schedule action\n                    }}\n                    className=\"text-purple-600 hover:text-purple-900\"\n                    title=\"Schedule appointment\"\n                  >\n                    <CalendarDaysIcon className=\"h-4 w-4\" />\n                  </button>\n\n                  <Menu as=\"div\" className=\"relative\">\n                    <Menu.Button\n                      onClick={(e) => e.stopPropagation()}\n                      className=\"text-gray-400 hover:text-gray-600\"\n                    >\n                      <EllipsisVerticalIcon className=\"h-4 w-4\" />\n                    </Menu.Button>\n\n                    <Transition\n                      as={Fragment}\n                      enter=\"transition ease-out duration-100\"\n                      enterFrom=\"transform opacity-0 scale-95\"\n                      enterTo=\"transform opacity-100 scale-100\"\n                      leave=\"transition ease-in duration-75\"\n                      leaveFrom=\"transform opacity-100 scale-100\"\n                      leaveTo=\"transform opacity-0 scale-95\"\n                    >\n                      <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-lg bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                        <Menu.Item>\n                          {({ active }) => (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                onStatusUpdate(lead.id, 'qualified')\n                              }}\n                              className={clsx(\n                                active ? 'bg-gray-100' : '',\n                                'block w-full px-4 py-2 text-left text-sm text-gray-700'\n                              )}\n                            >\n                              Mark as Qualified\n                            </button>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item>\n                          {({ active }) => (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                onStatusUpdate(lead.id, 'booked')\n                              }}\n                              className={clsx(\n                                active ? 'bg-gray-100' : '',\n                                'block w-full px-4 py-2 text-left text-sm text-gray-700'\n                              )}\n                            >\n                              Mark as Booked\n                            </button>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item>\n                          {({ active }) => (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                onStatusUpdate(lead.id, 'lost')\n                              }}\n                              className={clsx(\n                                active ? 'bg-gray-100' : '',\n                                'block w-full px-4 py-2 text-left text-sm text-red-700'\n                              )}\n                            >\n                              Mark as Lost\n                            </button>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item>\n                          {({ active }) => (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                // Handle edit action\n                              }}\n                              className={clsx(\n                                active ? 'bg-gray-100' : '',\n                                'block w-full px-4 py-2 text-left text-sm text-gray-700'\n                              )}\n                            >\n                              Edit Lead\n                            </button>\n                          )}\n                        </Menu.Item>\n                      </Menu.Items>\n                    </Transition>\n                  </Menu>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {leads.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"text-gray-500\">\n            <ChatBubbleLeftRightIcon className=\"h-12 w-12 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No leads found</h3>\n            <p className=\"text-sm\">Try adjusting your search or filters</p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1213, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/LeadFilters.tsx"],"sourcesContent":["'use client'\n\ninterface LeadFiltersProps {\n  statusFilter: string\n  onStatusFilterChange: (status: string) => void\n  intentFilter: string\n  onIntentFilterChange: (intent: string) => void\n  sourceFilter: string\n  onSourceFilterChange: (source: string) => void\n  dateRange: string\n  onDateRangeChange: (range: string) => void\n}\n\nexport function LeadFilters({\n  statusFilter,\n  onStatusFilterChange,\n  intentFilter,\n  onIntentFilterChange,\n  sourceFilter,\n  onSourceFilterChange,\n  dateRange,\n  onDateRangeChange,\n}: LeadFiltersProps) {\n  const statusOptions = [\n    { value: 'all', label: 'All Status' },\n    { value: 'new', label: 'New' },\n    { value: 'qualified', label: 'Qualified' },\n    { value: 'booked', label: 'Booked' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'lost', label: 'Lost' },\n  ]\n\n  const intentOptions = [\n    { value: 'all', label: 'All Intent' },\n    { value: 'buy', label: 'Buy' },\n    { value: 'rent', label: 'Rent' },\n    { value: 'browse', label: 'Browse' },\n    { value: 'invest', label: 'Invest' },\n  ]\n\n  const sourceOptions = [\n    { value: 'all', label: 'All Sources' },\n    { value: 'Facebook Lead Ad', label: 'Facebook Lead Ad' },\n    { value: 'WhatsApp Direct', label: 'WhatsApp Direct' },\n    { value: 'Property Portal', label: 'Property Portal' },\n    { value: 'Referral', label: 'Referral' },\n    { value: 'Website', label: 'Website' },\n  ]\n\n  const dateRangeOptions = [\n    { value: 'all', label: 'All Time' },\n    { value: '24h', label: 'Last 24 Hours' },\n    { value: '7d', label: 'Last 7 Days' },\n    { value: '30d', label: 'Last 30 Days' },\n  ]\n\n  return (\n    <div className=\"border-t border-gray-200 pt-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Status Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Status\n          </label>\n          <select\n            value={statusFilter}\n            onChange={(e) => onStatusFilterChange(e.target.value)}\n            className=\"input-field\"\n          >\n            {statusOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Intent Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Intent\n          </label>\n          <select\n            value={intentFilter}\n            onChange={(e) => onIntentFilterChange(e.target.value)}\n            className=\"input-field\"\n          >\n            {intentOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Source Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Source\n          </label>\n          <select\n            value={sourceFilter}\n            onChange={(e) => onSourceFilterChange(e.target.value)}\n            className=\"input-field\"\n          >\n            {sourceOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Date Range Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Date Range\n          </label>\n          <select\n            value={dateRange}\n            onChange={(e) => onDateRangeChange(e.target.value)}\n            className=\"input-field\"\n          >\n            {dateRangeOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Active Filters Display */}\n      <div className=\"mt-4 flex flex-wrap gap-2\">\n        {statusFilter !== 'all' && (\n          <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n            Status: {statusOptions.find(o => o.value === statusFilter)?.label}\n            <button\n              onClick={() => onStatusFilterChange('all')}\n              className=\"ml-2 text-blue-600 hover:text-blue-800\"\n            >\n              ×\n            </button>\n          </span>\n        )}\n        \n        {intentFilter !== 'all' && (\n          <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n            Intent: {intentOptions.find(o => o.value === intentFilter)?.label}\n            <button\n              onClick={() => onIntentFilterChange('all')}\n              className=\"ml-2 text-green-600 hover:text-green-800\"\n            >\n              ×\n            </button>\n          </span>\n        )}\n        \n        {sourceFilter !== 'all' && (\n          <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n            Source: {sourceOptions.find(o => o.value === sourceFilter)?.label}\n            <button\n              onClick={() => onSourceFilterChange('all')}\n              className=\"ml-2 text-purple-600 hover:text-purple-800\"\n            >\n              ×\n            </button>\n          </span>\n        )}\n        \n        {dateRange !== 'all' && (\n          <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\">\n            Date: {dateRangeOptions.find(o => o.value === dateRange)?.label}\n            <button\n              onClick={() => onDateRangeChange('all')}\n              className=\"ml-2 text-orange-600 hover:text-orange-800\"\n            >\n              ×\n            </button>\n          </span>\n        )}\n        \n        {(statusFilter !== 'all' || intentFilter !== 'all' || sourceFilter !== 'all' || dateRange !== 'all') && (\n          <button\n            onClick={() => {\n              onStatusFilterChange('all')\n              onIntentFilterChange('all')\n              onSourceFilterChange('all')\n              onDateRangeChange('all')\n            }}\n            className=\"text-xs text-gray-500 hover:text-gray-700 underline\"\n          >\n            Clear all filters\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1580, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/LeadDetails.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { format } from 'date-fns'\nimport { Dialog, Transition } from '@headlessui/react'\nimport { Fragment } from 'react'\nimport {\n  XMarkIcon,\n  PhoneIcon,\n  ChatBubbleLeftRightIcon,\n  CalendarDaysIcon,\n  MapPinIcon,\n  CurrencyDollarIcon,\n  ClockIcon,\n  TagIcon,\n} from '@heroicons/react/24/outline'\nimport clsx from 'clsx'\n\ninterface Lead {\n  id: string\n  phoneNumber: string\n  fullName: string\n  status: 'new' | 'qualified' | 'booked' | 'completed' | 'lost'\n  intent?: string\n  budget?: string\n  locationPreference?: string\n  propertyType?: string\n  timeline?: string\n  lastInteraction: string\n  messagesCount: number\n  createdAt: string\n  source: string\n}\n\ninterface LeadDetailsProps {\n  lead: Lead\n  onClose: () => void\n  onStatusUpdate: (status: string) => void\n}\n\nexport function LeadDetails({ lead, onClose, onStatusUpdate }: LeadDetailsProps) {\n  const [activeTab, setActiveTab] = useState<'overview' | 'activity' | 'notes'>('overview')\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800'\n      case 'qualified':\n        return 'bg-green-100 text-green-800'\n      case 'booked':\n        return 'bg-purple-100 text-purple-800'\n      case 'completed':\n        return 'bg-emerald-100 text-emerald-800'\n      case 'lost':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const statusOptions = [\n    { value: 'new', label: 'New' },\n    { value: 'qualified', label: 'Qualified' },\n    { value: 'booked', label: 'Booked' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'lost', label: 'Lost' },\n  ]\n\n  const tabs = [\n    { id: 'overview', name: 'Overview' },\n    { id: 'activity', name: 'Activity' },\n    { id: 'notes', name: 'Notes' },\n  ]\n\n  return (\n    <Transition appear show={true} as={Fragment}>\n      <Dialog as=\"div\" className=\"relative z-50\" onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 overflow-y-auto\">\n          <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-2xl transform overflow-hidden rounded-xl bg-white text-left align-middle shadow-xl transition-all\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"h-12 w-12 bg-primary-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-lg font-medium text-primary-700\">\n                        {lead.fullName.charAt(0)}\n                      </span>\n                    </div>\n                    <div>\n                      <h2 className=\"text-xl font-semibold text-gray-900\">\n                        {lead.fullName}\n                      </h2>\n                      <p className=\"text-sm text-gray-500\">{lead.phoneNumber}</p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={onClose}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <XMarkIcon className=\"h-6 w-6\" />\n                  </button>\n                </div>\n\n                {/* Status and Actions */}\n                <div className=\"px-6 py-4 border-b border-gray-200 bg-gray-50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <span className={clsx(\n                        'inline-flex items-center px-3 py-1 rounded-full text-sm font-medium',\n                        getStatusColor(lead.status)\n                      )}>\n                        {lead.status}\n                      </span>\n                      <select\n                        value={lead.status}\n                        onChange={(e) => onStatusUpdate(e.target.value)}\n                        className=\"text-sm border border-gray-300 rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                      >\n                        {statusOptions.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <button className=\"btn-secondary flex items-center\">\n                        <ChatBubbleLeftRightIcon className=\"h-4 w-4 mr-2\" />\n                        Message\n                      </button>\n                      <button className=\"btn-secondary flex items-center\">\n                        <PhoneIcon className=\"h-4 w-4 mr-2\" />\n                        Call\n                      </button>\n                      <button className=\"btn-primary flex items-center\">\n                        <CalendarDaysIcon className=\"h-4 w-4 mr-2\" />\n                        Schedule\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Tabs */}\n                <div className=\"border-b border-gray-200\">\n                  <nav className=\"flex space-x-8 px-6\">\n                    {tabs.map((tab) => (\n                      <button\n                        key={tab.id}\n                        onClick={() => setActiveTab(tab.id as any)}\n                        className={clsx(\n                          'py-4 px-1 border-b-2 font-medium text-sm',\n                          activeTab === tab.id\n                            ? 'border-primary-500 text-primary-600'\n                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                        )}\n                      >\n                        {tab.name}\n                      </button>\n                    ))}\n                  </nav>\n                </div>\n\n                {/* Tab Content */}\n                <div className=\"p-6\">\n                  {activeTab === 'overview' && (\n                    <div className=\"space-y-6\">\n                      {/* Lead Information */}\n                      <div className=\"grid grid-cols-2 gap-6\">\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center\">\n                            <TagIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Intent</p>\n                              <p className=\"text-sm text-gray-600 capitalize\">\n                                {lead.intent || 'Not specified'}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center\">\n                            <CurrencyDollarIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Budget</p>\n                              <p className=\"text-sm text-gray-600\">\n                                {lead.budget || 'Not specified'}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center\">\n                            <MapPinIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Location Preference</p>\n                              <p className=\"text-sm text-gray-600\">\n                                {lead.locationPreference || 'Not specified'}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center\">\n                            <ClockIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Timeline</p>\n                              <p className=\"text-sm text-gray-600\">\n                                {lead.timeline || 'Not specified'}\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center\">\n                            <ChatBubbleLeftRightIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Messages</p>\n                              <p className=\"text-sm text-gray-600\">\n                                {lead.messagesCount} messages\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center\">\n                            <TagIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Source</p>\n                              <p className=\"text-sm text-gray-600\">{lead.source}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Property Type */}\n                      {lead.propertyType && (\n                        <div className=\"border-t border-gray-200 pt-6\">\n                          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                            Property Requirements\n                          </h3>\n                          <div className=\"bg-gray-50 rounded-lg p-4\">\n                            <p className=\"text-sm text-gray-600\">\n                              Looking for: <span className=\"font-medium\">{lead.propertyType}</span>\n                            </p>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Timeline */}\n                      <div className=\"border-t border-gray-200 pt-6\">\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Timeline</h3>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Created</span>\n                            <span className=\"text-gray-900\">\n                              {format(new Date(lead.createdAt), 'MMM d, yyyy h:mm a')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Last Interaction</span>\n                            <span className=\"text-gray-900\">\n                              {format(new Date(lead.lastInteraction), 'MMM d, yyyy h:mm a')}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeTab === 'activity' && (\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">Recent Activity</h3>\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <ChatBubbleLeftRightIcon className=\"h-8 w-8 mx-auto mb-2\" />\n                        <p>Activity timeline coming soon</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {activeTab === 'notes' && (\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">Notes</h3>\n                      <textarea\n                        className=\"w-full h-32 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                        placeholder=\"Add notes about this lead...\"\n                      />\n                      <button className=\"btn-primary\">Save Notes</button>\n                    </div>\n                  )}\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2436, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/agent/BulkActions.tsx"],"sourcesContent":["'use client'\n\nimport { Menu, Transition } from '@headlessui/react'\nimport { Fragment } from 'react'\nimport {\n  ChevronDownIcon,\n  XMarkIcon,\n  TrashIcon,\n  ArrowPathIcon,\n} from '@heroicons/react/24/outline'\nimport clsx from 'clsx'\n\ninterface BulkActionsProps {\n  selectedCount: number\n  onStatusUpdate: (status: string) => void\n  onDelete: () => void\n  onClearSelection: () => void\n}\n\nexport function BulkActions({\n  selectedCount,\n  onStatusUpdate,\n  onDelete,\n  onClearSelection,\n}: BulkActionsProps) {\n  const statusOptions = [\n    { value: 'new', label: 'Mark as New', color: 'text-blue-600' },\n    { value: 'qualified', label: 'Mark as Qualified', color: 'text-green-600' },\n    { value: 'booked', label: 'Mark as Booked', color: 'text-purple-600' },\n    { value: 'completed', label: 'Mark as Completed', color: 'text-emerald-600' },\n    { value: 'lost', label: 'Mark as Lost', color: 'text-red-600' },\n  ]\n\n  return (\n    <div className=\"bg-primary-50 border border-primary-200 rounded-lg p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center\">\n            <span className=\"text-sm font-medium text-primary-900\">\n              {selectedCount} lead{selectedCount !== 1 ? 's' : ''} selected\n            </span>\n            <button\n              onClick={onClearSelection}\n              className=\"ml-2 text-primary-600 hover:text-primary-800\"\n            >\n              <XMarkIcon className=\"h-4 w-4\" />\n            </button>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {/* Status Update Dropdown */}\n            <Menu as=\"div\" className=\"relative\">\n              <Menu.Button className=\"btn-secondary flex items-center\">\n                <ArrowPathIcon className=\"h-4 w-4 mr-2\" />\n                Update Status\n                <ChevronDownIcon className=\"h-4 w-4 ml-2\" />\n              </Menu.Button>\n\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute left-0 z-10 mt-2 w-48 origin-top-left rounded-lg bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                  {statusOptions.map((option) => (\n                    <Menu.Item key={option.value}>\n                      {({ active }) => (\n                        <button\n                          onClick={() => onStatusUpdate(option.value)}\n                          className={clsx(\n                            active ? 'bg-gray-100' : '',\n                            'block w-full px-4 py-2 text-left text-sm',\n                            option.color\n                          )}\n                        >\n                          {option.label}\n                        </button>\n                      )}\n                    </Menu.Item>\n                  ))}\n                </Menu.Items>\n              </Transition>\n            </Menu>\n\n            {/* Delete Button */}\n            <button\n              onClick={onDelete}\n              className=\"btn-secondary text-red-600 hover:text-red-800 hover:bg-red-50 flex items-center\"\n            >\n              <TrashIcon className=\"h-4 w-4 mr-2\" />\n              Delete\n            </button>\n          </div>\n        </div>\n\n        <div className=\"text-xs text-primary-600\">\n          Bulk actions will be applied to all selected leads\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AAVA;;;;;;AAmBO,SAAS,YAAY,KAKT;QALS,EAC1B,aAAa,EACb,cAAc,EACd,QAAQ,EACR,gBAAgB,EACC,GALS;IAM1B,MAAM,gBAAgB;QACpB;YAAE,OAAO;YAAO,OAAO;YAAe,OAAO;QAAgB;QAC7D;YAAE,OAAO;YAAa,OAAO;YAAqB,OAAO;QAAiB;QAC1E;YAAE,OAAO;YAAU,OAAO;YAAkB,OAAO;QAAkB;QACrE;YAAE,OAAO;YAAa,OAAO;YAAqB,OAAO;QAAmB;QAC5E;YAAE,OAAO;YAAQ,OAAO;YAAgB,OAAO;QAAe;KAC/D;IAED,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;;wCACb;wCAAc;wCAAM,kBAAkB,IAAI,MAAM;wCAAG;;;;;;;8CAEtD,6LAAC;oCACC,SAAS;oCACT,WAAU;8CAEV,cAAA,6LAAC,oNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;;;;;;;;;;;;sCAIzB,6LAAC;4BAAI,WAAU;;8CAEb,6LAAC,8KAAA,CAAA,OAAI;oCAAC,IAAG;oCAAM,WAAU;;sDACvB,6LAAC,8KAAA,CAAA,OAAI,CAAC,MAAM;4CAAC,WAAU;;8DACrB,6LAAC,4NAAA,CAAA,gBAAa;oDAAC,WAAU;;;;;;gDAAiB;8DAE1C,6LAAC,gOAAA,CAAA,kBAAe;oDAAC,WAAU;;;;;;;;;;;;sDAG7B,6LAAC,0LAAA,CAAA,aAAU;4CACT,IAAI,6JAAA,CAAA,WAAQ;4CACZ,OAAM;4CACN,WAAU;4CACV,SAAQ;4CACR,OAAM;4CACN,WAAU;4CACV,SAAQ;sDAER,cAAA,6LAAC,8KAAA,CAAA,OAAI,CAAC,KAAK;gDAAC,WAAU;0DACnB,cAAc,GAAG,CAAC,CAAC,uBAClB,6LAAC,8KAAA,CAAA,OAAI,CAAC,IAAI;kEACP;gEAAC,EAAE,MAAM,EAAE;iFACV,6LAAC;gEACC,SAAS,IAAM,eAAe,OAAO,KAAK;gEAC1C,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EACZ,SAAS,gBAAgB,IACzB,4CACA,OAAO,KAAK;0EAGb,OAAO,KAAK;;;;;;;uDAVH,OAAO,KAAK;;;;;;;;;;;;;;;;;;;;;8CAoBpC,6LAAC;oCACC,SAAS;oCACT,WAAU;;sDAEV,6LAAC,oNAAA,CAAA,YAAS;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;;;;;;;;8BAM5C,6LAAC;oBAAI,WAAU;8BAA2B;;;;;;;;;;;;;;;;;AAMlD;KAtFgB","debugId":null}},
    {"offset": {"line": 2665, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/components/ui/input.tsx"],"sourcesContent":["import * as React from 'react'\nimport { cn } from '@/lib/utils'\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = 'Input'\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAKA,MAAM,sBAAQ,6JAAA,CAAA,aAAgB,MAC5B,QAAgC;QAA/B,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO;IAC5B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,8VACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2702, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/app/agent/leads/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useAuth } from '@/lib/auth/AuthContext'\nimport { leadsApi, type Lead, type LeadDetails as LeadDetailsType } from '@/lib/api/services'\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner'\nimport { LeadTable } from '@/components/agent/LeadTable'\nimport { LeadFilters } from '@/components/agent/LeadFilters'\nimport { LeadDetails } from '@/components/agent/LeadDetails'\nimport { BulkActions } from '@/components/agent/BulkActions'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Plus,\n  Filter,\n  Download,\n  Search,\n  Users,\n  TrendingUp,\n} from 'lucide-react'\n\n// Use the API types instead of local interfaces\nexport default function LeadsPage() {\n  const { user } = useAuth()\n  const [leads, setLeads] = useState<Lead[]>([])\n  const [selectedLeads, setSelectedLeads] = useState<string[]>([])\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null)\n  const [leadDetails, setLeadDetails] = useState<LeadDetailsType | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [loadingDetails, setLoadingDetails] = useState(false)\n  const [showFilters, setShowFilters] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [error, setError] = useState<string | null>(null)\n  const [total, setTotal] = useState(0)\n\n  // Filter states\n  const [statusFilter, setStatusFilter] = useState<string>('all')\n  const [intentFilter, setIntentFilter] = useState<string>('all')\n  const [sourceFilter, setSourceFilter] = useState<string>('all')\n  const [dateRange, setDateRange] = useState<string>('all')\n\n  // Pagination\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage] = useState(20)\n\n  // Load leads from API\n  const loadLeads = async () => {\n    if (!user?.id) return\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      const filters = {\n        agentId: user.id,\n        status: statusFilter === 'all' ? undefined : statusFilter,\n        source: sourceFilter === 'all' ? undefined : sourceFilter,\n        // Add more filters as needed\n      }\n\n      const response = await leadsApi.getLeads(\n        filters,\n        itemsPerPage,\n        (currentPage - 1) * itemsPerPage\n      )\n\n      setLeads(response.leads)\n      setTotal(response.total)\n    } catch (err) {\n      console.error('Failed to load leads:', err)\n      setError('Failed to load leads')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Load lead details\n  const loadLeadDetails = async (leadId: string) => {\n    try {\n      setLoadingDetails(true)\n      const details = await leadsApi.getLeadDetails(leadId)\n      setLeadDetails(details)\n    } catch (err) {\n      console.error('Failed to load lead details:', err)\n      setError('Failed to load lead details')\n    } finally {\n      setLoadingDetails(false)\n    }\n  }\n\n  // Load leads when filters change\n  useEffect(() => {\n    loadLeads()\n  }, [user?.id, statusFilter, sourceFilter, currentPage])\n\n  // Filter leads locally for search\n  const filteredLeads = leads.filter(lead => {\n    if (!searchQuery) return true\n\n    return (\n      (lead.fullName && lead.fullName.toLowerCase().includes(searchQuery.toLowerCase())) ||\n      lead.phoneNumber.includes(searchQuery) ||\n      (lead.locationPreference && lead.locationPreference.toLowerCase().includes(searchQuery.toLowerCase())) ||\n      (lead.intent && lead.intent.toLowerCase().includes(searchQuery.toLowerCase()))\n    )\n  })\n\n  const handleLeadSelect = (leadId: string, selected: boolean) => {\n    if (selected) {\n      setSelectedLeads(prev => [...prev, leadId])\n    } else {\n      setSelectedLeads(prev => prev.filter(id => id !== leadId))\n    }\n  }\n\n  const handleSelectAll = (selected: boolean) => {\n    if (selected) {\n      setSelectedLeads(filteredLeads.map(lead => lead.id))\n    } else {\n      setSelectedLeads([])\n    }\n  }\n\n  const handleLeadClick = async (lead: Lead) => {\n    setSelectedLead(lead)\n    await loadLeadDetails(lead.id)\n  }\n\n  const handleStatusUpdate = async (leadIds: string[], newStatus: string) => {\n    try {\n      // Update leads via API\n      for (const leadId of leadIds) {\n        await leadsApi.updateLead(leadId, { status: newStatus as Lead['status'] })\n      }\n\n      // Refresh leads list\n      await loadLeads()\n      setSelectedLeads([])\n    } catch (err) {\n      console.error('Failed to update lead status:', err)\n      setError('Failed to update lead status')\n    }\n  }\n\n  const handleBulkDelete = async (leadIds: string[]) => {\n    try {\n      // Delete leads via API\n      for (const leadId of leadIds) {\n        await leadsApi.deleteLead(leadId)\n      }\n\n      // Refresh leads list\n      await loadLeads()\n      setSelectedLeads([])\n    } catch (err) {\n      console.error('Failed to delete leads:', err)\n      setError('Failed to delete leads')\n    }\n  }\n\n  const handleExport = () => {\n    // Export functionality\n    const csvContent = [\n      ['Name', 'Phone', 'Status', 'Intent', 'Budget', 'Location', 'Created'],\n      ...filteredLeads.map(lead => [\n        lead.fullName,\n        lead.phoneNumber,\n        lead.status,\n        lead.intent || '',\n        lead.budget || '',\n        lead.locationPreference || '',\n        new Date(lead.createdAt).toLocaleDateString()\n      ])\n    ].map(row => row.join(',')).join('\\n')\n\n    const blob = new Blob([csvContent], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `leads-${new Date().toISOString().split('T')[0]}.csv`\n    a.click()\n    window.URL.revokeObjectURL(url)\n  }\n\n  // Pagination - using server-side pagination\n  const totalPages = Math.ceil(total / itemsPerPage)\n\n  const stats = {\n    total: total,\n    new: leads.filter(l => l.status === 'new').length,\n    qualified: leads.filter(l => l.status === 'qualified').length,\n    booked: leads.filter(l => l.status === 'appointment_set').length,\n    completed: leads.filter(l => l.status === 'converted').length,\n    lost: leads.filter(l => l.status === 'lost').length,\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Users className=\"h-6 w-6\" />\n            Lead Management\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage and track your leads through the sales pipeline\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={handleExport}\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Lead\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n        {Object.entries(stats).map(([key, value]) => (\n          <Card key={key}>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold\">{value}</div>\n              <div className=\"text-sm text-muted-foreground capitalize\">{key}</div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex-1 max-w-md\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowFilters(!showFilters)}\n              >\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filters\n              </Button>\n            </div>\n          </div>\n\n          {showFilters && (\n            <LeadFilters\n              statusFilter={statusFilter}\n              onStatusFilterChange={setStatusFilter}\n              intentFilter={intentFilter}\n              onIntentFilterChange={setIntentFilter}\n              sourceFilter={sourceFilter}\n              onSourceFilterChange={setSourceFilter}\n              dateRange={dateRange}\n              onDateRangeChange={setDateRange}\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Bulk Actions */}\n      {selectedLeads.length > 0 && (\n        <BulkActions\n          selectedCount={selectedLeads.length}\n          onStatusUpdate={(status) => handleStatusUpdate(selectedLeads, status)}\n          onDelete={() => handleBulkDelete(selectedLeads)}\n          onClearSelection={() => setSelectedLeads([])}\n        />\n      )}\n\n      {/* Lead Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          {error && (\n            <div className=\"p-4 text-center text-red-600\">\n              {error}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={loadLeads}\n                className=\"ml-2\"\n              >\n                Retry\n              </Button>\n            </div>\n          )}\n          {loading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <LoadingSpinner size=\"lg\" />\n            </div>\n          ) : filteredLeads.length > 0 ? (\n            <LeadTable\n              leads={filteredLeads}\n              selectedLeads={selectedLeads}\n              onLeadSelect={handleLeadSelect}\n              onSelectAll={handleSelectAll}\n              onLeadClick={handleLeadClick}\n              onStatusUpdate={(leadId, status) => handleStatusUpdate([leadId], status)}\n            />\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-64 text-muted-foreground\">\n              <Users className=\"h-8 w-8 mb-2\" />\n              <p className=\"text-sm\">No leads found</p>\n            </div>\n          )}\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"px-6 py-4 border-t\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, total)} of {total} results\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                    disabled={currentPage === 1}\n                  >\n                    Previous\n                  </Button>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                    disabled={currentPage === totalPages}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Lead Details Modal */}\n      {selectedLead && (\n        <LeadDetails\n          lead={selectedLead}\n          onClose={() => setSelectedLead(null)}\n          onStatusUpdate={(status) => {\n            handleStatusUpdate([selectedLead.id], status)\n            setSelectedLead(null)\n          }}\n        />\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}