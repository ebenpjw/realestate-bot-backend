{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/api/services/dashboardApi.ts"],"sourcesContent":["import { apiClient } from '../client'\n\nexport interface DashboardStats {\n  totalLeads: number\n  activeConversations: number\n  appointmentsToday: number\n  conversionRate: number\n  responseTime: number\n  messagesSent: number\n  templatesUsed: number\n  wabaStatus: 'connected' | 'disconnected' | 'error'\n}\n\nexport interface RecentActivity {\n  id: string\n  type: 'message' | 'appointment' | 'lead_status' | 'system'\n  title: string\n  description: string\n  timestamp: string\n  leadName?: string\n  phoneNumber?: string\n  status?: string\n}\n\nexport interface PerformanceMetrics {\n  period: 'today' | 'week' | 'month'\n  leadsGenerated: number\n  appointmentsBooked: number\n  conversionRate: number\n  averageResponseTime: number\n  messageVolume: number\n  topPerformingTemplates: Array<{\n    name: string\n    usage: number\n    responseRate: number\n  }>\n}\n\nclass DashboardApi {\n  /**\n   * Get dashboard statistics for agent\n   */\n  async getAgentStats(agentId?: string): Promise<DashboardStats> {\n    const response = await apiClient.get('/api/dashboard/agent/stats', {\n      params: agentId ? { agentId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get admin dashboard statistics\n   */\n  async getAdminStats(organizationId?: string, timeframe: string = '7d'): Promise<{\n    metrics: {\n      totalAgents: number\n      totalLeads: number\n      totalAppointments: number\n      totalMessages: number\n      totalConversations: number\n      monthlyCosts: number\n      conversionRate: number\n      avgConversionRate: number\n    }\n    growth: {\n      agents: number\n      conversations: number\n      costs: number\n      conversionRate: number\n    }\n    agentPerformance: any[]\n    timeframe: string\n    lastUpdated: string\n  }> {\n    const response = await apiClient.get('/api/dashboard/admin/overview', {\n      params: {\n        timeframe,\n        ...(organizationId ? { organizationId } : {})\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get recent activity for agent\n   */\n  async getRecentActivity(agentId?: string, limit = 10): Promise<RecentActivity[]> {\n    const response = await apiClient.get('/api/dashboard/agent/activity', {\n      params: {\n        agentId,\n        limit\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get performance metrics\n   */\n  async getPerformanceMetrics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<PerformanceMetrics> {\n    const response = await apiClient.get('/api/dashboard/performance', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get WABA connection status\n   */\n  async getWABAStatus(agentId?: string): Promise<{\n    status: 'connected' | 'disconnected' | 'error'\n    phoneNumber?: string\n    displayName?: string\n    lastSync?: string\n    errorMessage?: string\n  }> {\n    const response = await apiClient.get('/api/dashboard/waba/status', {\n      params: agentId ? { agentId } : undefined\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get conversation analytics\n   */\n  async getConversationAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalConversations: number\n    activeConversations: number\n    averageMessagesPerConversation: number\n    averageConversationDuration: number\n    conversionFunnel: Array<{\n      stage: string\n      count: number\n      percentage: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/conversations/analytics', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get appointment analytics\n   */\n  async getAppointmentAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    agentId?: string\n  ): Promise<{\n    totalAppointments: number\n    completedAppointments: number\n    cancelledAppointments: number\n    noShowRate: number\n    averageBookingTime: number\n    upcomingAppointments: Array<{\n      id: string\n      leadName: string\n      appointmentTime: string\n      status: string\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/appointments/analytics', {\n      params: {\n        period,\n        agentId\n      }\n    })\n    return response.data.data\n  }\n\n  /**\n   * Get cost analytics (admin only)\n   */\n  async getCostAnalytics(\n    period: 'today' | 'week' | 'month' = 'week',\n    organizationId?: string\n  ): Promise<{\n    totalCost: number\n    costPerLead: number\n    costPerAppointment: number\n    costBreakdown: Array<{\n      category: string\n      amount: number\n      percentage: number\n    }>\n    trends: Array<{\n      date: string\n      cost: number\n      leads: number\n      appointments: number\n    }>\n  }> {\n    const response = await apiClient.get('/api/dashboard/costs/analytics', {\n      params: {\n        period,\n        organizationId\n      }\n    })\n    return response.data.data\n  }\n}\n\nexport const dashboardApi = new DashboardApi()\n"],"names":[],"mappings":";;;AAAA;;AAsCA,MAAM;IACJ;;GAEC,GACD,MAAM,cAAc,OAAgB,EAA2B;QAC7D,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,UAAU;gBAAE;YAAQ,IAAI;QAClC;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,cAAc,cAAuB,EAAE,YAAoB,IAAI,EAoBlE;QACD,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,iCAAiC;YACpE,QAAQ;gBACN;gBACA,GAAI,iBAAiB;oBAAE;gBAAe,IAAI,CAAC,CAAC;YAC9C;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,kBAAkB,OAAgB,EAAE,QAAQ,EAAE,EAA6B;QAC/E,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,iCAAiC;YACpE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,sBACJ,SAAqC,MAAM,EAC3C,OAAgB,EACa;QAC7B,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,cAAc,OAAgB,EAMjC;QACD,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,8BAA8B;YACjE,QAAQ,UAAU;gBAAE;YAAQ,IAAI;QAClC;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,yBACJ,SAAqC,MAAM,EAC3C,OAAgB,EAWf;QACD,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,0CAA0C;YAC7E,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,wBACJ,SAAqC,MAAM,EAC3C,OAAgB,EAaf;QACD,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,yCAAyC;YAC5E,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;IAEA;;GAEC,GACD,MAAM,iBACJ,SAAqC,MAAM,EAC3C,cAAuB,EAgBtB;QACD,MAAM,WAAW,MAAM,oHAAA,CAAA,YAAS,CAAC,GAAG,CAAC,kCAAkC;YACrE,QAAQ;gBACN;gBACA;YACF;QACF;QACA,OAAO,SAAS,IAAI,CAAC,IAAI;IAC3B;AACF;AAEO,MAAM,eAAe,IAAI","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/lib/hooks/useDashboard.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { dashboardApi, DashboardStats, RecentActivity, PerformanceMetrics } from '@/lib/api/services/dashboardApi'\nimport { apiClient } from '@/lib/api/client'\nimport { useAuth } from '@/lib/auth/AuthContext'\n\n// Query Keys\nexport const dashboardKeys = {\n  all: ['dashboard'] as const,\n  stats: (agentId?: string) => [...dashboardKeys.all, 'stats', agentId] as const,\n  adminStats: (orgId?: string, timeframe?: string) => [...dashboardKeys.all, 'admin-stats', orgId, timeframe] as const,\n  activity: (agentId?: string, limit?: number) => [...dashboardKeys.all, 'activity', agentId, limit] as const,\n  performance: (period: string, agentId?: string) => [...dashboardKeys.all, 'performance', period, agentId] as const,\n  wabaStatus: (agentId?: string) => [...dashboardKeys.all, 'waba-status', agentId] as const,\n  conversationAnalytics: (period: string, agentId?: string) => [...dashboardKeys.all, 'conversation-analytics', period, agentId] as const,\n  appointmentAnalytics: (period: string, agentId?: string) => [...dashboardKeys.all, 'appointment-analytics', period, agentId] as const,\n  costAnalytics: (period: string, orgId?: string) => [...dashboardKeys.all, 'cost-analytics', period, orgId] as const,\n}\n\n// Agent Dashboard Hooks\nexport function useAgentStats(agentId?: string) {\n  return useQuery({\n    queryKey: dashboardKeys.stats(agentId),\n    queryFn: () => dashboardApi.getAgentStats(agentId),\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    refetchInterval: 5 * 60 * 1000, // Refresh every 5 minutes\n  })\n}\n\nexport function useRecentActivity(agentId?: string, limit = 10) {\n  return useQuery({\n    queryKey: dashboardKeys.activity(agentId, limit),\n    queryFn: () => dashboardApi.getRecentActivity(agentId, limit),\n    staleTime: 1 * 60 * 1000, // 1 minute\n    refetchInterval: 2 * 60 * 1000, // Refresh every 2 minutes\n  })\n}\n\nexport function usePerformanceMetrics(\n  period: 'today' | 'week' | 'month' = 'week',\n  agentId?: string\n) {\n  return useQuery({\n    queryKey: dashboardKeys.performance(period, agentId),\n    queryFn: () => dashboardApi.getPerformanceMetrics(period, agentId),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\nexport function useWABAStatus(agentId?: string) {\n  return useQuery({\n    queryKey: dashboardKeys.wabaStatus(agentId),\n    queryFn: () => dashboardApi.getWABAStatus(agentId),\n    staleTime: 30 * 1000, // 30 seconds\n    refetchInterval: 60 * 1000, // Refresh every minute\n  })\n}\n\n// Admin Dashboard Hooks\nexport function useAdminStats(organizationId?: string, timeframe: string = '7d') {\n  const { user } = useAuth()\n\n  return useQuery({\n    queryKey: dashboardKeys.adminStats(organizationId, timeframe),\n    queryFn: () => dashboardApi.getAdminStats(organizationId, timeframe),\n    enabled: user?.role === 'admin',\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    refetchInterval: 5 * 60 * 1000, // Refresh every 5 minutes\n  })\n}\n\n// Admin WABA Management Hook\nexport function useAdminWABAOverview(agentId?: string) {\n  const { user } = useAuth()\n\n  return useQuery({\n    queryKey: [...dashboardKeys.all, 'admin-waba-overview', agentId],\n    queryFn: async () => {\n      const params = agentId ? { agentId } : {}\n      const response = await apiClient.get('/api/dashboard/admin/waba-overview', { params })\n      return response.data.data\n    },\n    enabled: !!user && user.role === 'admin',\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    refetchInterval: false, // Disable automatic refetching to prevent rate limiting\n    retry: (failureCount, error: any) => {\n      // Don't retry on rate limiting errors\n      if (error?.response?.status === 429) {\n        return false\n      }\n      return failureCount < 2\n    },\n  })\n}\n\n// Analytics Hooks\nexport function useConversationAnalytics(\n  period: 'today' | 'week' | 'month' = 'week',\n  agentId?: string\n) {\n  return useQuery({\n    queryKey: dashboardKeys.conversationAnalytics(period, agentId),\n    queryFn: () => dashboardApi.getConversationAnalytics(period, agentId),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\nexport function useAppointmentAnalytics(\n  period: 'today' | 'week' | 'month' = 'week',\n  agentId?: string\n) {\n  return useQuery({\n    queryKey: dashboardKeys.appointmentAnalytics(period, agentId),\n    queryFn: () => dashboardApi.getAppointmentAnalytics(period, agentId),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\nexport function useCostAnalytics(\n  period: 'today' | 'week' | 'month' = 'week',\n  organizationId?: string\n) {\n  const { user } = useAuth()\n  \n  return useQuery({\n    queryKey: dashboardKeys.costAnalytics(period, organizationId),\n    queryFn: () => dashboardApi.getCostAnalytics(period, organizationId),\n    enabled: user?.role === 'admin',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Refresh Mutations\nexport function useRefreshDashboard() {\n  const queryClient = useQueryClient()\n  const { user } = useAuth()\n\n  return useMutation({\n    mutationFn: async () => {\n      // Trigger refresh of all dashboard data\n      await Promise.all([\n        queryClient.invalidateQueries({ queryKey: dashboardKeys.stats(user?.id) }),\n        queryClient.invalidateQueries({ queryKey: dashboardKeys.activity(user?.id) }),\n        queryClient.invalidateQueries({ queryKey: dashboardKeys.wabaStatus(user?.id) }),\n      ])\n    },\n  })\n}\n\n// Real-time Updates Hook\nexport function useDashboardRealTimeUpdates() {\n  const queryClient = useQueryClient()\n  const { user } = useAuth()\n\n  const invalidateStats = () => {\n    queryClient.invalidateQueries({ queryKey: dashboardKeys.stats(user?.id) })\n  }\n\n  const invalidateActivity = () => {\n    queryClient.invalidateQueries({ queryKey: dashboardKeys.activity(user?.id) })\n  }\n\n  const invalidateWABAStatus = () => {\n    queryClient.invalidateQueries({ queryKey: dashboardKeys.wabaStatus(user?.id) })\n  }\n\n  return {\n    invalidateStats,\n    invalidateActivity,\n    invalidateWABAStatus,\n  }\n}\n\n// Combined Dashboard Hook\nexport function useDashboardData(agentId?: string) {\n  const stats = useAgentStats(agentId)\n  const activity = useRecentActivity(agentId)\n  const wabaStatus = useWABAStatus(agentId)\n  const performance = usePerformanceMetrics('week', agentId)\n\n  return {\n    stats: stats.data,\n    activity: activity.data,\n    wabaStatus: wabaStatus.data,\n    performance: performance.data,\n    loading: stats.isLoading || activity.isLoading || wabaStatus.isLoading || performance.isLoading,\n    error: stats.error || activity.error || wabaStatus.error || performance.error,\n    refetch: () => {\n      stats.refetch()\n      activity.refetch()\n      wabaStatus.refetch()\n      performance.refetch()\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Imperial/Desktop/realestate-bot-backend/frontend/app/admin/waba/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { useAuth } from '@/lib/auth/AuthContext'\nimport { useAdminWABAOverview } from '@/lib/hooks/useDashboard'\nimport {\n  ChatBubbleLeftRightIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ExclamationTriangleIcon,\n  PlusIcon,\n  Cog6ToothIcon,\n  DocumentTextIcon,\n  PhoneIcon,\n  ChevronDownIcon\n} from '@heroicons/react/24/outline'\nimport { RefreshCw } from 'lucide-react'\nimport { Card } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner'\n\ninterface WABAAccount {\n  id: string\n  agentName: string\n  agentEmail: string\n  phoneNumber: string\n  businessName: string\n  status: 'connected' | 'pending' | 'error' | 'suspended' | 'disconnected'\n  verificationStatus: 'verified' | 'pending' | 'rejected'\n  lastSync: string\n  messagesSent: number\n  messagesReceived: number\n  templatesActive: number\n  templatesPending: number\n  appId?: string\n  partnerAppInfo?: any\n}\n\ninterface Template {\n  id: string\n  name: string\n  category: string\n  status: 'approved' | 'pending' | 'rejected'\n  language: string\n  lastUsed: string\n  usageCount: number\n  agentName?: string\n}\n\n// Helper functions\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case 'connected':\n      return <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n    case 'pending':\n      return <ExclamationTriangleIcon className=\"h-4 w-4 text-yellow-600\" />\n    case 'error':\n    case 'suspended':\n      return <XCircleIcon className=\"h-4 w-4 text-red-600\" />\n    default:\n      return <XCircleIcon className=\"h-4 w-4 text-gray-400\" />\n  }\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'connected':\n      return 'text-green-600 bg-green-50'\n    case 'pending':\n      return 'text-yellow-600 bg-yellow-50'\n    case 'error':\n    case 'suspended':\n      return 'text-red-600 bg-red-50'\n    default:\n      return 'text-gray-600 bg-gray-50'\n  }\n}\n\nconst getTemplateStatusIcon = (status: string) => {\n  switch (status.toUpperCase()) {\n    case 'APPROVED':\n      return <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n    case 'PENDING':\n      return <ExclamationTriangleIcon className=\"h-4 w-4 text-yellow-600\" />\n    case 'FAILED':\n    case 'REJECTED':\n      return <XCircleIcon className=\"h-4 w-4 text-red-600\" />\n    default:\n      return <ExclamationTriangleIcon className=\"h-4 w-4 text-gray-400\" />\n  }\n}\n\nconst getVerificationStatusColor = (status: string) => {\n  switch (status) {\n    case 'verified':\n      return 'text-green-600 bg-green-50'\n    case 'pending':\n      return 'text-yellow-600 bg-yellow-50'\n    case 'rejected':\n      return 'text-red-600 bg-red-50'\n    default:\n      return 'text-gray-600 bg-gray-50'\n  }\n}\n\nexport default function WABAPage() {\n  const router = useRouter()\n  const { user, hasPermission } = useAuth()\n  const [activeTab, setActiveTab] = useState('accounts')\n  const [selectedAgentId, setSelectedAgentId] = useState<string>('')\n\n  // Fetch real WABA data\n  const { data: wabaData, isLoading, error, refetch } = useAdminWABAOverview(selectedAgentId)\n\n  // Check admin permission\n  if (!hasPermission('manage_system')) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Card>\n          <div className=\"p-6 text-center\">\n            <h2 className=\"text-lg font-semibold mb-2\">Access Denied</h2>\n            <p className=\"text-gray-600\">You don't have permission to access WABA management.</p>\n          </div>\n        </Card>\n      </div>\n    )\n  }\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    )\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Card>\n          <div className=\"p-6 text-center\">\n            <h2 className=\"text-lg font-semibold mb-2\">Error Loading Data</h2>\n            <p className=\"text-gray-600 mb-4\">Failed to load WABA management data</p>\n            <Button onClick={() => refetch()}>Try Again</Button>\n          </div>\n        </Card>\n      </div>\n    )\n  }\n\n  const accounts = wabaData?.accounts || []\n  const templates = wabaData?.templates || []\n  const totalAccounts = wabaData?.totalAccounts || 0\n  const activeAccounts = wabaData?.activeAccounts || 0\n  const activeTemplates = wabaData?.activeTemplates || 0\n\n  const handleAddAccount = () => {\n    router.push('/admin/agents?action=add')\n  }\n\n  const handleConfigureAccount = (accountId: string) => {\n    router.push(`/admin/agents/${accountId}/waba`)\n  }\n\n  const handleViewDetails = (accountId: string) => {\n    router.push(`/admin/agents/${accountId}`)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">WABA Management</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Manage WhatsApp Business API accounts and templates\n          </p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => refetch()}\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button\n            variant=\"default\"\n            onClick={handleAddAccount}\n          >\n            <PlusIcon className=\"h-4 w-4 mr-2\" />\n            Add Agent\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Accounts</p>\n              <p className=\"text-2xl font-semibold text-gray-900 mt-2\">\n                {totalAccounts}\n              </p>\n            </div>\n            <ChatBubbleLeftRightIcon className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </Card>\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Accounts</p>\n              <p className=\"text-2xl font-semibold text-gray-900 mt-2\">\n                {activeAccounts}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </Card>\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Templates</p>\n              <p className=\"text-2xl font-semibold text-gray-900 mt-2\">\n                {activeTemplates}\n              </p>\n            </div>\n            <DocumentTextIcon className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setActiveTab('accounts')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'accounts'\n                ? 'border-primary-500 text-primary-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            WABA Accounts\n          </button>\n          <button\n            onClick={() => setActiveTab('templates')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'templates'\n                ? 'border-primary-500 text-primary-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Message Templates\n          </button>\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'accounts' && (\n        <div className=\"space-y-4\">\n          {accounts.map((account) => (\n            <Card key={account.id} className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"h-12 w-12 bg-primary-100 rounded-lg flex items-center justify-center\">\n                    <PhoneIcon className=\"h-6 w-6 text-primary-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">\n                      {account.businessName}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {account.agentName} • {account.phoneNumber}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-4 mt-3\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(account.status)}`}>\n                        {getStatusIcon(account.status)}\n                        <span className=\"ml-1\">{account.status}</span>\n                      </span>\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(account.verificationStatus)}`}>\n                        {getStatusIcon(account.verificationStatus)}\n                        <span className=\"ml-1\">Verification: {account.verificationStatus}</span>\n                      </span>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4 mt-4\">\n                      <div>\n                        <p className=\"text-xs text-gray-500\">Messages Sent</p>\n                        <p className=\"text-sm font-medium text-gray-900\">{account.messagesSent.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-500\">Messages Received</p>\n                        <p className=\"text-sm font-medium text-gray-900\">{account.messagesReceived.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-gray-500\">Active Templates</p>\n                        <p className=\"text-sm font-medium text-gray-900\">{account.templatesActive}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleConfigureAccount(account.id)}\n                  >\n                    <Cog6ToothIcon className=\"h-4 w-4 mr-1\" />\n                    Configure\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleViewDetails(account.id)}\n                  >\n                    View Details\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {activeTab === 'templates' && (\n        <div className=\"space-y-6\">\n          {/* Agent Selector */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900\">Message Templates</h3>\n                <p className=\"text-sm text-gray-500 mt-1\">View templates for a specific agent</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <select\n                    value={selectedAgentId}\n                    onChange={(e) => setSelectedAgentId(e.target.value)}\n                    className=\"appearance-none bg-white border border-gray-300 rounded-md px-4 py-2 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"\">Select an agent...</option>\n                    {accounts\n                      .filter(account => account.status === 'connected')\n                      .map(account => (\n                        <option key={account.id} value={account.id}>\n                          {account.agentName} ({account.businessName})\n                        </option>\n                      ))}\n                  </select>\n                  <ChevronDownIcon className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Templates Table */}\n          {selectedAgentId && (\n            <Card className=\"overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Template\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Category\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Usage\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Last Used\n                  </th>\n                  <th className=\"relative px-6 py-3\">\n                    <span className=\"sr-only\">Actions</span>\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {templates.map((template) => (\n                  <tr key={template.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {template.name}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        Language: {template.language.toUpperCase()}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                        {template.category}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(template.status)}`}>\n                        {getTemplateStatusIcon(template.status)}\n                        <span className=\"ml-1\">{template.status}</span>\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {template.usageCount.toLocaleString()} times\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {template.lastUsed}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Edit\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n          )}\n\n          {/* Show message when no agent selected */}\n          {!selectedAgentId && (\n            <Card className=\"p-12\">\n              <div className=\"text-center\">\n                <DocumentTextIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-4 text-lg font-medium text-gray-900\">Select an Agent</h3>\n                <p className=\"mt-2 text-sm text-gray-500\">\n                  Choose an agent from the dropdown above to view their message templates.\n                </p>\n              </div>\n            </Card>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}