# ===========================================
# REAL ESTATE BOT - ENVIRONMENT VARIABLES
# ===========================================
# Copy this file to .env and fill in your actual values
# For Railway deployment, set these in Railway's environment variables

# ===========================================
# SERVER CONFIGURATION
# ===========================================
NODE_ENV=production
PORT=8080

# ===========================================
# SUPABASE DATABASE CONFIGURATION
# ===========================================
# Get these from your Supabase project dashboard
SUPABASE_URL=https://your-project.supabase.co
# IMPORTANT: Use SERVICE_ROLE key for server-side applications, NOT anon key
# The service_role key bypasses RLS and is required for backend operations
SUPABASE_KEY=your-supabase-service-role-key
SUPABASE_TIMEOUT=10000

# For Railway, use Supavisor connection pooling for better performance
# Use transaction mode for serverless-like behavior
DATABASE_URL=postgres://postgres.your-project:[password]@aws-0-[region].pooler.supabase.com:6543/postgres

# ===========================================
# WHATSAPP BUSINESS API (GUPSHUP)
# ===========================================
# Get these from your Gupshup dashboard
WABA_NUMBER=your-whatsapp-business-number
GUPSHUP_API_KEY=your-gupshup-api-key
GUPSHUP_API_SECRET=your-gupshup-api-secret
GUPSHUP_TIMEOUT=10000

# ===========================================
# WHATSAPP TEMPLATES (WABA COMPLIANCE)
# ===========================================
# These template IDs must be approved in your Gupshup account

# Your existing approved welcome template (lead_intro_1)
# Template content: "Hi {{1}}, thanks for leaving your contact regarding {{2}}! ðŸ˜Š"
TEMPLATE_WELCOME_ID=c60dee92-5426-4890-96e4-65469620ac7e
# Alternative environment variable name (for backward compatibility)
DEFAULT_WELCOME_TEMPLATE_ID=c60dee92-5426-4890-96e4-65469620ac7e

# Additional templates (configure these with your approved template IDs)
TEMPLATE_FOLLOWUP_ID=your-followup-template-id
TEMPLATE_REMINDER_ID=your-reminder-template-id
TEMPLATE_UPDATE_ID=your-update-template-id

# ===========================================
# META (FACEBOOK) WEBHOOK CONFIGURATION
# ===========================================
# For Meta webhook verification and security
META_VERIFY_TOKEN=your-meta-verify-token
META_APP_SECRET=your-meta-app-secret
META_TIMEOUT=10000

# ===========================================
# OPENAI CONFIGURATION
# ===========================================
# For AI-powered conversations
OPENAI_API_KEY=your-openai-api-key
OPENAI_TEMPERATURE=0.5
OPENAI_MAX_TOKENS=1000
OPENAI_TIMEOUT=30000

# ===========================================
# GOOGLE OAUTH & CALENDAR INTEGRATION
# ===========================================
# For booking consultations
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=https://your-railway-app.railway.app/api/auth/google/callback
GOOGLE_TIMEOUT=15000

# ===========================================
# ZOOM OAUTH & MEETING INTEGRATION
# ===========================================
# For creating consultation meetings

# Server-to-Server OAuth (Recommended for production)
# This allows creating meetings for multiple agents using a single Zoom Business account
# Get these from your Zoom Marketplace app with Server-to-Server OAuth enabled
ZOOM_ACCOUNT_ID=your-zoom-account-id
ZOOM_CLIENT_ID=your-zoom-client-id
ZOOM_CLIENT_SECRET=your-zoom-client-secret

# Legacy User OAuth (Fallback)
# Only needed if agents don't have zoom_email set in the database
ZOOM_REDIRECT_URI=https://your-railway-app.railway.app/api/auth/zoom/callback

# Timeout for Zoom API requests
ZOOM_TIMEOUT=15000

# ===========================================
# SECURITY CONFIGURATION
# ===========================================
# Generate a 64-character hex string (32 bytes) for encryption
# You can use: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
REFRESH_TOKEN_ENCRYPTION_KEY=your-64-character-hex-encryption-key

# Webhook security token for validating incoming requests
WEBHOOK_SECRET_TOKEN=your-webhook-secret-token

# ===========================================
# CORS CONFIGURATION
# ===========================================
# Comma-separated list of allowed origins for CORS
CORS_ORIGINS=https://your-frontend-domain.com,https://your-admin-panel.com

# ===========================================
# FEATURE FLAGS
# ===========================================
# Enable/disable features
ENABLE_RATE_LIMITING=true
ENABLE_REQUEST_LOGGING=true

# ===========================================
# RAILWAY-SPECIFIC CONFIGURATION
# ===========================================
# Railway automatically provides these, but you can override if needed
# RAILWAY_ENVIRONMENT=production
# RAILWAY_SERVICE_NAME=realestate-bot-backend
# RAILWAY_DEPLOYMENT_ID=auto-generated

# ===========================================
# MONITORING & LOGGING
# ===========================================
# Log level for production
LOG_LEVEL=info

# ===========================================
# PERFORMANCE TUNING
# ===========================================
# Timeouts for different operations (in milliseconds)
REQUEST_TIMEOUT=30000
DATABASE_TIMEOUT=10000
EXTERNAL_API_TIMEOUT=15000

# ===========================================
# DEVELOPMENT ONLY
# ===========================================
# These are only used in development mode
# DEV_WEBHOOK_URL=https://your-ngrok-url.ngrok.io
# DEV_SKIP_WEBHOOK_VERIFICATION=false
